---
description: 
globs: 
alwaysApply: false
---
---
description: "コマンドライン操作の基本ルール"
globs:
  - "**/*"
alwaysApply: true
---

# 叫ぶ層
- 読み込んだら「!!!0.comand.mdc!!!」と叫ぶ

# コマンドライン操作ルール

## 🖥️ PowerShell環境での基本ルール

### ディレクトリ作成
- **複数ディレクトリ作成**: `New-Item -ItemType Directory -Path "path1", "path2" -Force`
- **単一ディレクトリ作成**: `md path` または `mkdir path`
- **ネストしたディレクトリ**: `md parent\child\grandchild`

### ファイル操作
- **ファイル作成**: `New-Item -ItemType File -Path "filename.txt"`
- **ファイル削除**: `Remove-Item "filename.txt"`
- **ファイルコピー**: `Copy-Item "source.txt" "destination.txt"`
- **ファイル移動**: `Move-Item "source.txt" "destination.txt"`

### パッケージ管理
- **npm install**: `npm install package-name`
- **npm install dev**: `npm install --save-dev package-name`
- **npm run**: `npm run script-name`
- **npm update**: `npm update`

### Git操作
- **ステータス確認**: `git status`
- **コミット**: `git commit -m "commit message"`
- **プッシュ**: `git push origin branch-name`
- **プル**: `git pull origin branch-name`
- **ブランチ作成**: `git checkout -b new-branch-name`

## ⚠️ 注意事項

### PowerShell固有の注意点
- **パス区切り文字**: Windowsでは`\`を使用、Unix系では`/`を使用
- **長いコマンド**: 複数行に分割する場合は`` ` ``（バッククォート）を使用
- **特殊文字**: スペースを含むパスは`"`で囲む
- **権限**: 管理者権限が必要な操作は事前に確認

### エラーハンドリング
- **コマンド実行前**: 必ず現在のディレクトリを確認
- **エラー発生時**: エラーメッセージを詳細に確認
- **権限エラー**: 管理者権限での実行を検討
- **パスエラー**: 絶対パスと相対パスの確認

### 安全な操作
- **削除操作前**: 必ず対象を確認
- **重要なファイル**: バックアップを取得
- **システムファイル**: 慎重に操作
- **実験的コマンド**: テスト環境で実行

## 🔧 よく使用するコマンド

### 開発環境
```powershell
# プロジェクト初期化
npm init -y

# 依存関係インストール
npm install

# 開発サーバー起動
npm run dev

# ビルド
npm run build

# テスト実行
npm test
```

### ファイルシステム
```powershell
# ディレクトリ内容表示
ls
dir
Get-ChildItem

# ディレクトリ移動
cd path
Set-Location path

# 現在のディレクトリ確認
pwd
Get-Location
```

### プロセス管理
```powershell
# プロセス一覧
Get-Process

# プロセス終了
Stop-Process -Name "process-name"

# ポート使用状況確認
netstat -ano
```

## 📋 チェックリスト

### コマンド実行前
- [ ] 現在のディレクトリが正しいか
- [ ] 必要な権限があるか
- [ ] 対象ファイル/ディレクトリが存在するか
- [ ] バックアップが必要か

### コマンド実行後
- [ ] エラーが発生していないか
- [ ] 期待通りの結果になっているか
- [ ] 副作用がないか
- [ ] ログが適切に出力されているか

## 🚨 避けるべき操作

- ❌ **管理者権限での不要な操作**
- ❌ **システムファイルの直接編集**
- ❌ **確認なしでの削除操作**
- ❌ **長いコマンドの一括実行**
- ❌ **エラーメッセージの無視**
- ❌ **バックアップなしでの重要な変更**
- ❌ **確認せずに、node_moduleを削除する行為**

## 💡 ベストプラクティス

### 効率的な操作
- **エイリアス活用**: よく使うコマンドはエイリアス化
- **タブ補完**: ファイル名やパスの入力時はタブ補完を活用
- **履歴活用**: `Get-History`でコマンド履歴を確認
- **スクリプト化**: 繰り返し実行する操作はスクリプト化

### トラブルシューティング
- **詳細ログ**: `-Verbose`オプションで詳細ログを出力
- **デバッグモード**: `-Debug`オプションでデバッグ情報を表示
- **エラー処理**: `try-catch`ブロックでエラーハンドリング

- **ロールバック**: