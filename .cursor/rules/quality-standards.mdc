---
description: 
globs: 
alwaysApply: false
---
# 🎯 プロジェクト品質基準

## 📋 コーディング規約

### TypeScript 規約
- **strict mode** を必ず有効にする
- **any** 型の使用は禁止（例外は最小限に）
- **型推論** を活用し、明示的な型注釈は必要最小限に
- **interface** と **type** の使い分けを明確にする

### 命名規約
- **PascalCase**: コンポーネント、クラス、型
- **camelCase**: 変数、関数、メソッド
- **UPPER_SNAKE_CASE**: 定数
- **kebab-case**: ファイル名、CSS クラス

### ファイル構造規約
- **1ファイル1責任** の原則を守る
- **50行を超えるファイル** は分割を検討
- **200行を超えるファイル** は必須分割
- **ネスト3階層以上** のJSXは避ける

## 🔧 実装品質基準

### エラーハンドリング
- **try-catch** で適切な例外処理
- **ユーザーフレンドリーなエラーメッセージ**
- **ログ出力** でのデバッグ情報記録
- **フォールバックUI** の提供

### パフォーマンス
- **不要な再レンダリング** の防止
- **遅延読み込み** の実装
- **バンドルサイズ** の最適化

### セキュリティ
- **入力値の検証** を必ず実施
- **SQLインジェクション** の防止
- **XSS攻撃** の防止
- **認証・認可** の適切な実装

## 📊 コード品質指標

### 複雑度管理
- **循環複雑度**: 10以下を推奨
- **認知複雑度**: 15以下を推奨
- **関数の行数**: 30行以下を推奨
- **クラスの行数**: 200行以下を推奨

### テストカバレッジ
- **単体テスト**: 80%以上
- **統合テスト**: 主要機能は100%
- **E2Eテスト**: 重要なユーザーフロー

### ドキュメント
- **README.md**: プロジェクト概要、セットアップ手順
- **API仕様書**: OpenAPI/Swagger形式
- **コンポーネント仕様**: Storybook形式
- **変更履歴**: CHANGELOG.md

## 🚨 禁止事項

### コーディング
- ❌ **ハードコードされた値**
- ❌ **マジックナンバー**
- ❌ **コメントアウトされたコード**
- ❌ **未使用のインポート**
- ❌ **未使用の変数**
- ❌ **console.log** の本番環境での使用

### アーキテクチャ
- ❌ **グローバル変数の使用**
- ❌ **副作用の多い関数**
- ❌ **密結合なコンポーネント**
- ❌ **重複したコード**

## ✅ 推奨事項

### 開発環境
- **ESLint** の厳格な設定
- **Prettier** でのコードフォーマット統一
- **Husky** でのコミット前チェック
- **lint-staged** でのステージングファイルのみチェック

### ツール活用
- **TypeScript** の型チェック
- **React DevTools** でのデバッグ
- **Chrome DevTools** でのパフォーマンス分析
- **Lighthouse** でのWeb品質評価

## 📋 レビューチェックリスト

### コードレビュー
- [ ] 型安全性が確保されているか
- [ ] エラーハンドリングが適切か
- [ ] パフォーマンスが考慮されているか
- [ ] セキュリティが確保されているか
- [ ] テストが書かれているか
- [ ] ドキュメントが更新されているか
- [ ] 命名が適切か
- [ ] コードの可読性が高いか

### 機能レビュー
- [ ] 要件を満たしているか
- [ ] ユーザビリティが考慮されているか
- [ ] アクセシビリティが確保されているか
- [ ] レスポンシブデザインが実装されているか
- [ ] ブラウザ互換性が確保されているか

## 🔄 継続的改善

### 定期的な見直し
- **月次**: コード品質指標の確認
- **四半期**: アーキテクチャの見直し
- **年次**: 技術スタックの評価

### フィードバックループ
- **ユーザーフィードバック** の収集
- **パフォーマンス監視** の継続
- **エラー監視** の実装
- **使用状況分析** の実施

