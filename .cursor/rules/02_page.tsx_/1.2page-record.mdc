---
description: 
globs: 
alwaysApply: false
---
---
description: "Next.js プロジェクトにおける page.tsx の構造・分割ルール"
globs:
  - "src/app/**/page.tsx"
alwaysApply: false
---

# 🔄 ファイル更新時のルール

## 📋 基本方針

**プログラムを維持しながら変更する**ことを最優先とし、以下の手順で段階的に進めます：

1. **コードの整理**：層を明確化し、適切なセクションに配置
2. **修正点の特定**：コメントアウトで変更箇所を明示
3. **段階的な変更**：小さな変更から順次実行
4. **動作確認**：各段階で動作を確認

---

## 🎯 更新前の準備手順

### 1️⃣ 現在のコード分析

#### 1-1. ファイル構造の把握
```bash
# 現在のファイルサイズを確認
wc -l src/app/xxx/page.tsx

# セクション構造を確認
grep -n "// ==" src/app/xxx/page.tsx
```

#### 1-2. 依存関係の確認
- [ ] 使用しているコンポーネントの特定
- [ ] API呼び出しの箇所を特定
- [ ] 状態管理（Zustand）の使用箇所を特定
- [ ] 型定義の依存関係を確認

#### 1-3. 変更影響範囲の分析
- [ ] 変更予定箇所の特定
- [ ] 影響を受ける他のファイルの特定
- [ ] テストが必要な範囲の特定

### 2️⃣ コード整理の準備

#### 2-1. セクション構造の確認
現在のコードが以下のセクション構造に従っているか確認：

```tsx
// ==========================================
// 型定義層（Props, 内部型, API型）
// ==========================================

// ==========================================
// パラメータとルーティング層（useParams, useRouter, useSearchParams）
// ==========================================

// ==========================================
// 状態管理層（useState, useReducer）
// ==========================================

// ==========================================
// データ取得層（useEffect, use hooks）
// ==========================================

// ==========================================
// 副作用層（useMemo, useCallback）
// ==========================================

// ==========================================
// イベントハンドラ層（onClick, onSubmit, onChange）
// ==========================================

// ==========================================
// レンダリング層（JSX return）
// ==========================================
```

#### 2-2. 不適切な配置の特定
- [ ] 型定義が適切なセクションにない箇所
- [ ] データ取得が適切なセクションにない箇所
- [ ] イベントハンドラが適切なセクションにない箇所
- [ ] レンダリングロジックが適切なセクションにない箇所

---

## 🔧 コード整理手順

### 3️⃣ セクション構造の整理

#### 3-1. 型定義の整理
```tsx
// 変更前：型定義が散在している
export default function Page() {
  interface LocalType { // ❌ 関数内で型定義
    id: string;
  }
  
  const data: LocalType[] = [];
  // ...
}

// 変更後：型定義を適切なセクションに移動
// ==========================================
// 型定義層
// ==========================================
interface LocalType {
  id: string;
}

export default function Page() {
  const data: LocalType[] = [];
  // ...
}
```

#### 3-2. データ取得の整理
```tsx
// 変更前：データ取得が散在している
export default function Page() {
  const [data, setData] = useState([]);
  
  // レンダリング中にデータ取得
  useEffect(() => {
    fetchData().then(setData);
  }, []);
  
  return <div>{/* JSX */}</div>;
}

// 変更後：データ取得を適切なセクションに移動
export default function Page() {
  // ==========================================
  // 状態管理層
  // ==========================================
  const [data, setData] = useState([]);
  
  // ==========================================
  // データ取得層
  // ==========================================
  useEffect(() => {
    fetchData().then(setData);
  }, []);
  
  // ==========================================
  // レンダリング層
  // ==========================================
  return <div>{/* JSX */}</div>;
}
```

#### 3-3. イベントハンドラの整理
```tsx
// 変更前：イベントハンドラが散在している
export default function Page() {
  const handleClick = () => {
    // 処理
  };
  
  return (
    <div>
      <button onClick={handleClick}>Click</button>
    </div>
  );
}

// 変更後：イベントハンドラを適切なセクションに移動
export default function Page() {
  // ==========================================
  // イベントハンドラ層
  // ==========================================
  const handleClick = () => {
    // 処理
  };
  
  // ==========================================
  // レンダリング層
  // ==========================================
  return (
    <div>
      <button onClick={handleClick}>Click</button>
    </div>
  );
}
```

### 4️⃣ 修正点のコメントアウト

#### 4-1. 変更予定箇所の明示
```tsx
// ==========================================
// 型定義層
// ==========================================
interface CurrentType {
  id: string;
  name: string;
}

// TODO: 変更予定 - 新しいフィールドを追加
// interface UpdatedType {
//   id: string;
//   name: string;
//   email: string; // 新規追加
//   createdAt: Date; // 新規追加
// }

// ==========================================
// データ取得層
// ==========================================
// TODO: 変更予定 - API呼び出し方法を変更
// const data = await fetchCurrentData();
const data = await fetchLegacyData(); // 一時的に旧APIを使用

// TODO: 変更予定 - 新しいAPIに変更
// const data = await fetchUpdatedData();
```

#### 4-2. 段階的変更の計画
```tsx
// 変更計画：
// Phase 1: 型定義の更新
// Phase 2: API呼び出しの更新
// Phase 3: レンダリングロジックの更新
// Phase 4: テストの更新

// Phase 1: 型定義の更新（コメントアウトで準備）
// interface UpdatedType {
//   id: string;
//   name: string;
//   email: string;
//   createdAt: Date;
// }

// 現在の型定義（後で削除予定）
interface CurrentType {
  id: string;
  name: string;
}
```

---

## 🚀 段階的変更手順

### 5️⃣ Phase 1: 型定義の更新

#### 5-1. 新しい型定義の追加
```tsx
// ==========================================
// 型定義層
// ==========================================
// 新しい型定義を追加（既存の型定義は残す）
interface UpdatedType {
  id: string;
  name: string;
  email: string;
  createdAt: Date;
}

// 既存の型定義（後で削除予定）
interface CurrentType {
  id: string;
  name: string;
}
```

#### 5-2. 型の使用箇所を段階的に変更
```tsx
// 変更前
const data: CurrentType[] = await fetchData();

// 変更後（段階的）
// TODO: Phase 1 - 型定義の更新
const data: CurrentType[] = await fetchData(); // 一時的に既存型を使用

// TODO: Phase 2 - 新しい型に変更
// const data: UpdatedType[] = await fetchData();
```

### 6️⃣ Phase 2: API呼び出しの更新

#### 6-1. 新しいAPI関数の準備
```tsx
// ==========================================
// データ取得層
// ==========================================
// 新しいAPI関数を追加
async function fetchUpdatedData(): Promise<UpdatedType[]> {
  const response = await fetch('/api/updated-data');
  return response.json();
}

// 既存のAPI関数（後で削除予定）
async function fetchLegacyData(): Promise<CurrentType[]> {
  const response = await fetch('/api/legacy-data');
  return response.json();
}
```

#### 6-2. API呼び出しの段階的変更
```tsx
// 変更前
const data = await fetchLegacyData();

// 変更後（段階的）
// TODO: Phase 2 - API呼び出しの更新
const data = await fetchLegacyData(); // 一時的に既存APIを使用

// TODO: Phase 3 - 新しいAPIに変更
// const data = await fetchUpdatedData();
```

### 7️⃣ Phase 3: レンダリングロジックの更新

#### 7-1. 新しいレンダリングロジックの準備
```tsx
// ==========================================
// レンダリング層
// ==========================================
// 新しいレンダリングロジックを準備
function renderUpdatedData(data: UpdatedType[]) {
  return (
    <div>
      {data.map(item => (
        <div key={item.id}>
          <h3>{item.name}</h3>
          <p>{item.email}</p>
          <small>{item.createdAt.toLocaleDateString()}</small>
        </div>
      ))}
    </div>
  );
}

// 既存のレンダリングロジック（後で削除予定）
function renderLegacyData(data: CurrentType[]) {
  return (
    <div>
      {data.map(item => (
        <div key={item.id}>
          <h3>{item.name}</h3>
        </div>
      ))}
    </div>
  );
}
```

#### 7-2. レンダリングの段階的変更
```tsx
// 変更前
return renderLegacyData(data);

// 変更後（段階的）
// TODO: Phase 3 - レンダリングロジックの更新
return renderLegacyData(data); // 一時的に既存レンダリングを使用

// TODO: Phase 4 - 新しいレンダリングに変更
// return renderUpdatedData(data);
```

---

## ✅ 各段階での動作確認

### 8️⃣ 動作確認チェックリスト

#### 8-1. Phase 1 完了後の確認
- [ ] TypeScriptエラーがないか
- [ ] 既存機能が正常に動作するか
- [ ] 新しい型定義が適切に定義されているか

#### 8-2. Phase 2 完了後の確認
- [ ] API呼び出しが正常に動作するか
- [ ] データが正しく取得できているか
- [ ] エラーハンドリングが適切か

#### 8-3. Phase 3 完了後の確認
- [ ] 新しいレンダリングが正常に動作するか
- [ ] UIが期待通りに表示されるか
- [ ] パフォーマンスに問題がないか

#### 8-4. 最終確認
- [ ] すべての機能が正常に動作するか
- [ ] 古いコードが適切に削除されているか
- [ ] コメントアウトが適切に削除されているか
- [ ] テストが正常に通るか

---

## 🚨 変更時の禁止事項

### ❌ 避けるべき変更パターン
- **一度に大きな変更を行う**
- **既存の構造を大幅に変更する**
- **既存のAPIインターフェースを変更する**
- **既存のprops構造を変更する**
- **既存のCSSクラス名を変更する**
- **既存のファイル名を変更する**
- **既存の機能を削除する**
- **既存のオプションを削除する**
- **既存のデフォルト値を変更する**
- **既存のエラーメッセージを変更する**
- **パフォーマンス特性を劣化させる**
- **変更内容をドキュメント化しない**

### ✅ 推奨変更パターン
- **既存の構造を維持する**
- **既存の機能を活用する**
- **段階的に変更する**
- **変更内容をドキュメント化する**
- **動作確認を徹底する**
- **後方互換性を維持する**
- **パフォーマンスを維持する**

---

## 📝 変更記録の義務

### 必須記録項目
```markdown
## 変更記録

### 変更日時
2024-XX-XX

### 変更理由
- 機能追加のため
- バグ修正のため
- パフォーマンス改善のため

### 変更内容
- ファイル：src/app/xxx/page.tsx
- Phase 1: 型定義の更新
- Phase 2: API呼び出しの更新
- Phase 3: レンダリングロジックの更新

### 影響範囲
- 関連ファイル：components/XxxTable.tsx
- 依存関係：useXxxData hook

### テスト結果
- [x] Phase 1: 型チェック通過
- [x] Phase 2: API呼び出し確認
- [x] Phase 3: レンダリング確認
- [x] 最終確認: 全機能動作確認

### パフォーマンス影響
- 改善：ローディング時間短縮
- 影響なし：既存機能への影響なし
```

---

## 📚 詳細ルール



詳細な実装ルールについては、必ず **`.cursor\rules\page-patterns.mdc`** を参照してください。