---
description: 
globs: 
alwaysApply: false
---
---
description: "Next.js プロジェクトにおける page.tsx ルール"
globs:
  - "src/app/**/*.{ts,tsx}"
alwaysApply: false
ruleType: Agent Requested
tags:
  - mdc
  - rules
  - documentation
  - generator
  - frontend
priority: 2
version: "1.0.0"
---


# ✅ React/TypeScript `.tsx` 全般実装ルール

ガイドライン
本プロジェクトのTSXは以下ルールを持って作成する。

.tsxは、以下命名規則に乗っ取り作成されたファイルです。
新たにファイルを作成する場合は、## 1. .tsx 命名規則を確認し、ファイル名を作成してください。
修正変更の場合は、その名前からどんな機能か軽く文脈をおってください。
命名規則に則していないファイル名を触るときは、私に確認してください。
また、本プロジェクトでは、コードの内容は、以下構造化されるようにコーディングしています。出来ていない場合は、真っ先に、
構造に分けるタスクを行ってください。
適切にコード分離をしながらpage.tsxがあるフォルダの整理をする。

## 1. .tsxおよび.ts 命名規則

### 1-1. ファイル名
- **PascalCase**: `UserProfile.tsx`, `DataTable.tsx`
- **機能を表す名前**: `UserList.tsx`, `ProjectCard.tsx`
- **接尾辞の統一**: `Table.tsx`, `Form.tsx`, `Card.tsx`, `Modal.tsx`

### 1-2. コンポーネント名
- **PascalCase**: `UserProfile`, `DataTable`
- **機能を表す名前**: `UserList`, `ProjectCard`
- **接尾辞の統一**: `Table`, `Form`, `Card`, `Modal`

### 1-3. フック名
- **use** プレフィックス: `useUserData`, `useProjectActions`
- **機能を表す名前**: `useFetchUsers`, `useHandleSubmit`
- **データ取得型**: `useGetUsersDate`, `useGet`

### 1-4. 型名
- **PascalCase**: `UserData`, `ProjectConfig`
- **Interface**: `IUserData` または `UserData`
- **Type**: `UserStatus`, `ProjectType`

## 2. ヘッダー規則

### 2-1-1. 基本ファイルヘッダー方針
```tsx
// ==========================================
// ファイル名: ComponentName.tsx
// 機能: このコンポーネントの主要な機能を簡潔に説明
// 技術: 使用している主要な技術やライブラリ
// 作成者: 作成者名（オプション）
// 作成日: YYYY-MM-DD（オプション）
// 更新履歴: 重要な変更があれば記載（オプション）
// ==========================================
```

### 2-1-2. Client Component ヘッダー
```tsx

'use client';
// ==========================================
// ファイル名: ComponentName.tsx
// 機能: このコンポーネントの主要な機能を簡潔に説明
// 技術: 使用している主要な技術やライブラリ
// 作成者: 作成者名（オプション）
// 作成日: YYYY-MM-DD（オプション）
// 更新履歴: 重要な変更があれば記載（オプション）
// ==========================================
```

### 2-1-3. .tsヘッダー
```ts

// ==========================================
// ファイル名: ComponentName.ts
// 機能: 主要な機能を簡潔に説明
// 作成日: YYYY-MM-DD（オプション）
// 更新履歴: 重要な変更があれば記載（オプション）
// ==========================================
```

### 2-3. ヘッダー説明項目の詳細

#### ファイル名
- 実際のファイル名を記載
- 例: `UserProfile.tsx`, `DataTable.tsx`

#### 機能
- コンポーネントの主要な役割を1-2行で説明
- 例: `ユーザープロフィール表示・編集コンポーネント`
- 例: `データテーブル表示・ソート・フィルタリング機能`

#### 技術
- 使用している主要な技術やライブラリ
- 例: `React Hooks, Tailwind CSS, Shadcn UI`
- 例: `Zustand, React Query, Radix UI`

#### 作成者（オプション）
- コンポーネントの作成者名
- チーム開発時に有用
- 初期は”same"

#### 作成日（オプション）
- 初回作成日
- フォーマット: `YYYY-MM-DD`

#### 更新履歴（オプション）
- 重要な変更や機能追加の履歴
- 例: `2024-01-15: フィルタリング機能追加`
- 例: `2024-01-20: パフォーマンス最適化`

### 2-4. ヘッダー使用例

#### 例1: シンプルなServer Component
```tsx
// ==========================================
// ファイル名: DataTable.tsx
// 機能: データテーブル表示・ソート・フィルタリング・ページネーション
// 技術: React Hooks, Zustand, Shadcn UI, Radix UI
// 作成者: same
// 作成日: 2024-01-15
// 更新履歴: 2024-01-20: カスタムフィルター機能追加
// ==========================================
```

#### 例2: 複雑なClient Component
```tsx


// ==========================================
'use client';
// ファイル名: DataTable.tsx
// 機能: データテーブル表示・ソート・フィルタリング・ページネーション
// 技術: React Hooks, Zustand, Shadcn UI, Radix UI
// 作成者: 鮫島
// 作成日: 2024-01-15
// 更新履歴: 2024-01-20: カスタムフィルター機能追加
// ==========================================
```

#### 例3: フォームコンポーネント
```tsx


// ==========================================

'use client';
// ファイル名: UserForm.tsx
// 機能: ユーザー情報入力・編集フォーム
// 技術: React Hook Form, Zod, Shadcn UI
// ==========================================
```

#### 例4:型
```ts


// ==========================================
// ファイル名: UserForm.ts
// 機能: ○○の型
// ==========================================
```

## 10. 🚨 .tsx 避けるべきパターン

- ❌ **インラインスタイルの多用**
- ❌ **インライン関数の多用**
- ❌ **大きなコンポーネントの作成**
- ❌ **型定義のインライン化**
- ❌ **ハードコードされた値**
- ❌ **適切でないエラーハンドリング**
- ❌ **パフォーマンスを考慮しない実装**
- ❌ **アクセシビリティの無視**
- ❌ **セマンティックでないHTML**
- ❌ **不要な再レンダリング**
- ❌ **型安全性の無視**

## 11. ✅ .tsx 推奨パターン

- ✅ **適切な型定義**
- ✅ **パフォーマンス最適化**
- ✅ **エラーハンドリング**
- ✅ **アクセシビリティ対応**
- ✅ **セマンティックHTML**
- ✅ **コンポーネントの分割**
- ✅ **テストの実装**
- ✅ **命名規則の統一**
- ✅ **状態管理の適切な使用**



