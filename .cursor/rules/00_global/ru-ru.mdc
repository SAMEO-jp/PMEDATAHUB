---
description:
globs:
alwaysApply: false
---
🧩 「ルールのルール」設計の方向性（メタルール化）
1. ルールのタイプ分類
まず、「どのタイプのルールか？」を分類するマスタを作るべきです：

実装ルール（Coding Rules）

例：API設計 / React構成 / CSS命名 / DB構造

プロセスルール（Process Rules）

例：要件定義ステップ / レビュー手順 / Pull Request方針

ドキュメントルール（Document Rules）

例：議事録構成 / 設計書テンプレート / 用語統一

意思決定ルール（Decision Rules）

例：優先度判断基準 / タスク分類基準 / 属人判断の言語化


📚 ルール分類マスター（Rule Type Master）
分類名	ruleType記法	主な対象	目的	記述形式の例	コメント
実装ルール	coding	コード・構成・命名	コード品質・一貫性の確保	ファイル構成・関数名・命名ルール・ベストプラクティス	最もCursor向き
ドキュメントルール	document	要件定義・設計書・議事録等	表記統一・品質維持	Markdownセクション構成・テンプレート例	柔らかく曖昧になりがち、構造化が肝
プロセスルール	process	手順・フロー・稟議ルート等	業務の標準化と属人排除	ステップバイステップ・フローチャート・チェックリスト	非エンジニアにも見せることが多い
判断ルール	decision	タスク判定・優先度・要否判断	判断基準の明文化・透明性確保	判断軸＋事例集 or Yes/Noチャート	人による判断のばらつき防止に有効
用語・分類ルール	taxonomy	用語・分類軸・コード体系	表記ゆれ・理解齟齬の回避	用語リスト・カテゴリーマスター	社内共通言語の定義に必須
カスタムルール	custom	その他特定用途	特定状況への対処	フリーフォーマット	例：特定PJの運用上の注意点など
