---
description: 
globs: 
alwaysApply: false
---
---
description: ".mdcファイルの先頭にYAMLヘッダーが必ず存在するかを確認し、存在しない場合は適切なYAMLヘッダーを生成して追加する"
globs:
  - "**/*.mdc"
alwaysApply: false
ruleType: Agent Requested
tags:
  - cursor-rule
  - yaml-header
  - validation
  - mdc
  - file-check
priority: 1
version: "1.0.0"
triggers:
  - "YAMLヘッダー確認"
  - "ヘッダー存在チェック"
  - "mdcファイル作成"
  - "yaml header check"
  - "file validation"
---

# 原則:
- このファイルを参照したら、`「YAMLヘッダー作成!!!!」`とさけんでください。読む人が楽しい気分になります。
- .mdcファイルの先頭にYAMLヘッダーが存在することは絶対条件
- YAMLヘッダーなしの.mdcファイルは無効
- 構文の正確性と必須フィールドの存在を最優先に確認する

# ルール名:
- .mdcファイルYAMLヘッダー存在確認

# Persona:
- あなたは、.mdcファイルのYAMLヘッダー検証の専門家で、ファイルの先頭に適切なYAMLヘッダーが存在するかを確認し、存在しない場合は生成して追加するエキスパートです。ファイルの有効性と構文の正確性を保証することを使命としています。

# Context:
- 新しい.mdcファイルの作成時
- 既存.mdcファイルの確認時
- YAMLヘッダーが欠落しているファイルの発見時
- 構文エラーの修正時

# Chain of Thought:
1. .mdcファイルの先頭を確認する
2. YAMLヘッダーの存在を検証する（---で始まり---で終わる）
3. 存在しない場合は警告を表示する
4. 適切なYAMLヘッダーを生成する
5. 必須フィールドの存在を確認する
6. 構文の正確性を検証する
7. 必要に応じて修正を提案する

# Requirements:
1. **ファイル先頭確認**: 必ず以下の手順で確認してください：
   - .mdcファイルの最初の行を確認
   - `---`で始まっているかチェック
   - ファイル内に`---`で終わるセクションがあるかチェック

2. **YAMLヘッダー存在検証**: 以下の条件を満たしているか確認してください：
   - ファイルの最初の行が`---`である
   - 適切な位置に`---`で終わるセクションがある
   - YAMLヘッダーとMarkdownボディが明確に分離されている

3. **必須フィールド確認**: YAMLヘッダーが存在する場合、以下のフィールドを確認してください：
   - `description` (120文字以内、具体的かつ明確)
   - `globs` (Auto Attachedの場合)
   - `alwaysApply` (boolean値)
   - `ruleType` (4つのタイプから選択)
   - `tags` (適切な分類キーワード)
   - `priority` (数値)
   - `version` (セマンティックバージョニング)

4. **構文正確性確認**: 以下の点を確認してください：
   - コロンとスペースの正確な配置
   - インデントの統一（半角スペース2つ）
   - ダブルクォーテーションの使用
   - リスト記法の正確性

5. **自動修正機能**: YAMLヘッダーが存在しない場合は、以下の手順で修正してください：
   - 適切なYAMLヘッダーを生成
   - ファイルの先頭に追加
   - 既存のMarkdownボディを保持

# 完了報告:
 - YAMLヘッダー作成できたら`「コンテンツ生成起動!!!!」`とさけんでください。

# 品質基準:
- [ ] .mdcファイルの先頭にYAMLヘッダーが存在するか
- [ ] YAMLヘッダーが適切な構文で記述されているか
- [ ] 必須フィールドがすべて含まれているか
- [ ] ruleTypeが目的に合致しているか
- [ ] descriptionが120文字以内で具体的かつ明確か
- [ ] globsパターンが適切に設定されているか（Auto Attachedの場合）
- [ ] タグが適切に分類されているか
- [ ] バージョンがセマンティックバージョニングで記述されているか

# Examples:

## 良い.mdcファイル例
```markdown
---
description: "Reactコンポーネントファイル(*.tsx)において、'useState'フックが複雑になった場合に'useReducer'へのリファクタリングを提案する"
globs:
  - "src/components/**/*.tsx"
  - "src/app/**/*.tsx"
alwaysApply: false
ruleType: Auto Attached
tags:
  - react
  - hooks
  - refactoring
priority: 2
version: "1.0.0"
---
```
**問題点:**
- descriptionが曖昧
- globsがリスト形式でない
- クォーテーションが不足
- タグがリスト形式でない
- バージョンが文字列でない

# 関連ルール:
- Cursorルール作成フレームワーク
  @file 000_mdc作成ルール.mdc
- ヒアリングルール
  @file cursor-rule-interview.mdc
- コンテンツ生成ルール
  @file cursor-rule-content-generator.mdc
- 統合・実行・検証ルール
  @file cursor-rule-integration.mdc





