---
description: 
globs: 
alwaysApply: false
---
# フォルダ構造ルール

## プロジェクトの基本構造
```
project-root/
├── app/                    # Next.js 14.2.28 のApp Router構造
│   │           
│   ├── app_sample/ # app_sampleは、サンプルの名前です。
│   │   ├── components/     
│   │   ├── layouts/       
│   │   └── page.tsx        
│   └── api            
│       └── app_sample       
├── data/               
│   └── achievements.db  # SQLiteデータベース


## アプリケーションの構成ルール

### 1. メインアプリケーション（app/(main)/）
各業務アプリケーションは独立したディレクトリとして配置
- 命名規則: `kebab-case`
- 例: `dashboard/`, `master/`, `workflow/`

### 2. 各アプリケーションの内部構造
```
app-name/
├── components/     # アプリケーション固有のコンポーネント
├── layouts/        # アプリケーション固有のレイアウト
├── hooks/          # アプリケーション固有のフック
├── types/          # アプリケーション固有の型定義
├── utils/          # アプリケーション固有のユーティリティ
└── page.tsx        # メインページ
```

### 9. 設定ファイルのルール
1. 環境変数
   - 配置場所: `config/env/`
   - 命名規則: `.env.[environment]`

2. 業務設定
   - 配置場所: `config/business/`
   - 命名規則: `[feature]-config.ts`

### 10. インポートパスの規則
1. 絶対パス
   - 共通コンポーネント: `@/src/component/`
   - アプリ固有コンポーネント: `@/app/(main)/[app-name]/components/`
   - ユーティリティ: `@/src/lib/utils/`
   - 型定義: `@/src/types/`

2. 相対パス
   - 同一ディレクトリ内: `./`
   - 親ディレクトリ: `../`
   - 2階層上: `../../`

## ディレクトリの役割と命名規則

### app/ ディレクトリ
- Next.js 14.2.28のApp Routerを使用
- ページコンポーネントは`page.tsx`
- レイアウトは`layout.tsx`
- ローディング状態は`loading.tsx`
- エラー処理は`error.tsx`


## ファイル命名の一般的なルール
- コンポーネント: `PascalCase.tsx`
- ユーティリティ: `camelCase.ts`
- スタイル: `kebab-case.css`
- 型定義: `PascalCase.d.ts`

## データベース関連のルール
1. データベースファイルは `data/` ディレクトリに配置
2. マイグレーションファイルは `data/migrations/` に配置
3. シードデータは `data/seeds/` に配置

## スタイルのルール
1. グローバルスタイルは `src/styles/` に配置
2. コンポーネント固有のスタイルは該当コンポーネントと同じディレクトリに配置
3. テーマ設定は `src/styles/theme/` に配置

## 型定義のルール
2. コンポーネント固有の型定義は該当コンポーネントと同じディレクトリに配置







