---
description: "品質基準、コーディング規約、レビュープロセスを定義します。"
globs: ["**/*.{ts,tsx}"]
alwaysApply: true
---
# 🎨 品質基準

## 🏗️ コードのスタイルと構造

### 基本原則
- **正確な例を用いて、簡潔で技術的な TypeScript コードを書く**
- **関数型と宣言型のプログラミングパターンを使用し、クラスは避ける**
- **コードの重複よりも反復とモジュール化を優先する**
- **補助動詞(isLoading, hasErrorなど)を用いた説明的な変数名を使用する**


## 🏷️ 命名規則

### ディレクトリ・ファイル名
- **ディレクトリ**: ダッシュ付きの小文字（例: `components/auth-wizard`）
- **コンポーネント**: PascalCase（例: `UserProfile.tsx`）
- **フック**: camelCase with `use` prefix（例: `useUserData.ts`）
- **ユーティリティ**: camelCase（例: `dateUtils.ts`）
- **型定義**: PascalCase with `.types.ts` suffix（例: `User.types.ts`）

### 変数・関数名
- **変数**: 説明的な名前（例: `isLoading`, `hasError`, `userData`）
- **関数**: 動詞 + 名詞（例: `fetchUserData`, `handleSubmit`）
- **定数**: UPPER_SNAKE_CASE（例: `API_ENDPOINTS`）

## 🔧 TypeScriptの使用法

### 基本原則
- **すべてのコードにTypeScriptを使用する**
- **列挙型は避け、代わりにconst assertionを使用する**
- **インターフェースを優先し、typeは必要時のみ使用する**

### 型定義の例
```typescript
// インターフェース（推奨）
interface User {
  id: string;
  name: string;
  email: string;
  createdAt: Date;
}

// 定数オブジェクト（列挙型の代替）
const USER_STATUS = {
  ACTIVE: 'active',
  INACTIVE: 'inactive',
  PENDING: 'pending',
} as const;

type UserStatus = typeof USER_STATUS[keyof typeof USER_STATUS];

// Props型定義
interface ComponentProps {
  data: User[];
  onSelect: (user: User) => void;
  isLoading?: boolean;
}
```
