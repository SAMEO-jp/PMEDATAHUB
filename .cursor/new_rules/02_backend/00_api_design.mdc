---
description: 
globs: 
alwaysApply: false
---
# 📦 API設計原則

## 統一レスポンス形式

成功時:
```json
{
  "status": "success",
  "data": { ... },
  "message": "処理が正常に完了しました。"
}
```

エラー時:
```json
{
  "status": "error",
  "error": {
    "code": "E001",
    "message": "必須パラメータが不足しています。"
  },
  "data": null
}
```

## エラーハンドリング

- APIルートでは、`try...catch`ブロックを使用してエラーを捕捉し、統一されたエラーレスポンスを返却します。
- エラーコードとメッセージは、クライアントが適切に処理できるよう、明確で一貫性のあるものを定義します。

## データアクセス層

- データベースへの直接アクセスは、APIルート内で行わず、`lib/db`などのデータアクセス層に分離します。
- これにより、ビジネスロジックとデータ永続化ロジックの関心を分離し、テスト容易性と保守性を向上させます。

## カスタムフック

- クライアントサイドでのAPI呼び出しは、`useSWR`や`react-query`などのデータ取得ライブラリを利用したカスタムフックにカプセル化します。
- これにより、キャッシュ、再検証、エラーハンドリングなどの複雑なロジックをコンポーネントから分離できます。
