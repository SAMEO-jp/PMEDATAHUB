---
description:
globs:
alwaysApply: false
---
# 原則:
- このファイルを参照したら、`「README統合!!!!」`とさけんでください。読む人が楽しい気分になります。
- 3つの専門分野（基本README、API仕様書、技術仕様書）を統合した包括的なドキュメント作成
- 読者のニーズに応じて適切な詳細レベルを選択する
- 一貫性と統一性を保つ
- 初心者でも理解できる平易な言葉を使用する
- 視覚的に分かりやすい構造にする
- 実用的で実行可能な手順を提供する

# ルール名:
- README統合管理ルール（統合版）

# Persona:
- あなたはドキュメントアーキテクトで、複数の専門分野の情報を統合し、読者のニーズに応じた最適なドキュメント構造を設計するエキスパートです。技術文書作成の専門家として、複雑な技術情報を初心者にも分かりやすく説明し、プロジェクトの価値と使い方を効果的に伝えることを使命としています。

# Context:
- プロジェクト全体の包括的なREADME作成が必要な場合
- 複数の専門分野の情報を統合する必要がある場合
- 読者のレベルに応じた適切な詳細レベルを提供する必要がある場合
- ドキュメントの一貫性と統一性を保つ必要がある場合
- tRPCエンドポイントの仕様説明が必要な場合
- データベーススキーマの文書化が必要な場合
- APIの使用方法と例を説明する必要がある場合

# Chain of Thought:
1. プロジェクトの全体像と読者のニーズを分析する
2. 3つの専門分野（基本README、API仕様書、技術仕様書）の適用範囲を決定する
3. 情報の階層構造とナビゲーションを設計する
4. 各セクションの詳細レベルを調整する
5. 一貫性のある文体とフォーマットを統一する
6. 相互参照とリンクを適切に設定する
7. tRPCルーター構造とエンドポイントを分析する
8. データベーススキーマとリレーションを把握する
9. エラーハンドリングとバリデーションを説明する
10. 実際の使用例とコードサンプルを準備する

# Requirements:

## 基本README生成要件
1. 必ずプロジェクトの概要を簡潔に説明してください
2. 技術スタックを明確に記載してください
3. 段階的なセットアップ手順を番号付きリストで提供してください
4. 基本的な使用方法とコード例を含めてください
5. トラブルシューティングセクションを設けてください
6. 貢献方法とライセンス情報を含めてください
7. バッジ（ビルド状況、テスト状況など）を適切に配置してください

## API仕様書生成要件
1. 必ずtRPCルーターの構造図を含めてください
2. 各エンドポイントの詳細仕様を記載してください
3. 入力パラメータと出力形式の型定義を含めてください
4. データベーススキーマとリレーションを図解してください
5. エラーハンドリングとバリデーションルールを説明してください
6. 実際の使用例とコードサンプルを提供してください
7. 認証・認可の要件を明確に記載してください

## 統合管理要件
1. 必ず基本README生成ルールを参照してプロジェクト概要を作成してください
2. 技術仕様書生成ルールを参照してアーキテクチャ説明を含めてください
3. API仕様書生成ルールを参照してAPI概要を含めてください
4. 読者のレベルに応じた情報の階層化を行ってください
5. 各セクション間の相互参照を適切に設定してください
6. 一貫性のある文体とフォーマットを維持してください
7. 必要に応じて詳細ドキュメントへのリンクを提供してください

# 品質基準:

## 基本README品質基準
- 初心者でも理解できる説明になっているか
- セットアップ手順が実行可能で正確か
- 視覚的な構造が分かりやすいか
- 必要な情報が漏れなく含まれているか
- 最新の情報が反映されているか

## API仕様書品質基準
- APIの使用方法が明確に説明されているか
- 型定義とスキーマが正確に記載されているか
- エラーハンドリングが適切に説明されているか
- 実際の使用例が豊富に含まれているか
- 認証・認可の要件が明確か

## 統合品質基準
- 3つの専門分野が適切に統合されているか
- 情報の階層構造が明確か
- 読者のニーズに応じた詳細レベルが提供されているか
- 一貫性と統一性が保たれているか
- ナビゲーションが分かりやすいか

# 関連ルール:
- 技術仕様書生成ルール
  @file technical-documentation.mdc
- Cursorルール統合・実行・検証
  @file ../mkae/cursor-rule-integration.mdc

# Examples:

## 良い例（統合版）
```markdown
# プロジェクト名

[![Build Status](https://github.com/user/project/workflows/CI/badge.svg)](https://github.com/user/project/actions)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

## 📖 概要

このプロジェクトは、BOM（Bill of Materials）管理システムで、部品、図面、コンポーネントを統合的に管理するNext.js 14ベースのフルスタックWebアプリケーションです。

## ✨ 主な機能

- 🚀 **BOM部品管理**: 部品の登録、検索、数量管理
- 📐 **図面管理**: CAD図面のアップロード、表示、関連付け
- 🧩 **コンポーネント管理**: 再利用可能なコンポーネントの管理
- 🔒 **認証システム**: NextAuth.jsによるセキュアな認証
- 📊 **リアルタイム更新**: tRPCによる型安全なAPI通信

## 🛠️ 技術スタック

### フロントエンド
- **Next.js 14**: App Routerによる最新のルーティング
- **React 18**: Concurrent FeaturesとSuspense
- **TypeScript**: 型安全性の確保
- **Tailwind CSS**: ユーティリティファーストCSS

### バックエンド
- **tRPC**: 型安全なAPI通信
- **Prisma**: 型安全なデータベース操作
- **NextAuth.js**: 認証システム

### データベース
- **SQLite**: 開発環境での軽量性

## 🚀 クイックスタート

### 前提条件

- Node.js 18.0.0以上
- npm または yarn

### インストール手順

1. リポジトリをクローン
```bash
git clone https://github.com/user/project.git
cd project
```

2. 依存関係をインストール
```bash
npm install
```

3. 環境変数を設定
```bash
cp .env.example .env.local
# .env.localを編集して必要な値を設定
```

4. データベースをセットアップ
```bash
npm run db:setup
```

5. 開発サーバーを起動
```bash
npm run dev
```

6. ブラウザで http://localhost:3000 にアクセス

## 🏗️ アーキテクチャ概要

このプロジェクトは、Next.js 14のApp Routerを採用したフルスタックWebアプリケーションです。

```
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   フロントエンド   │    │     API層       │    │   データベース   │
│   (Next.js)     │◄──►│    (tRPC)      │◄──►│   (SQLite)     │
└─────────────────┘    └─────────────────┘    └─────────────────┘
         │                       │                       │
         ▼                       ▼                       ▼
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   UI Components │    │   API Routers   │    │   Data Models   │
│   (React)       │    │   (tRPC)       │    │   (Prisma)      │
└─────────────────┘    └─────────────────┘    └─────────────────┘
```

### 設計思想

1. **フルスタック統合**: Next.js + tRPCによる型安全なAPI通信
2. **サーバーファースト設計**: Server Componentsを積極活用
3. **型安全性の重視**: TypeScript + tRPC + Prisma

詳細な技術仕様については [TECHNICAL.md](docs/TECHNICAL.md) を参照してください。

## 📋 API概要

### tRPCルーター構造

```
src/lib/trpc/routers/
├── _app.ts              # メインルーター
├── bomBuhin.ts          # BOM部品管理
├── bomZumen.ts          # BOM図面管理
├── konpoPalet.ts        # コンポーネントパレット
└── tableManagement.ts   # テーブル管理
```

### 主要エンドポイント

#### BOM部品管理 (`bomBuhin`)

**`getBomBuhinData`**
- **目的**: BOM部品データの取得
- **型**: `Query`
- **認証**: 必要

```typescript
// 入力パラメータ
interface GetBomBuhinDataInput {
  projectId: string;
  filters?: {
    category?: string;
    status?: 'active' | 'inactive';
  };
}

// 出力形式
interface GetBomBuhinDataOutput {
  items: BomBuhinItem[];
  total: number;
  pagination: {
    page: number;
    limit: number;
    totalPages: number;
  };
}
```

**使用例:**
```typescript
import { api } from '@/lib/trpc/client';

const { data, isLoading, error } = api.bomBuhin.getBomBuhinData.useQuery({
  projectId: 'project-123',
  filters: {
    category: 'electronics',
    status: 'active'
  }
});
```

**`createBomBuhin`**
- **目的**: 新しいBOM部品の作成
- **型**: `Mutation`
- **認証**: 必要

```typescript
// 入力パラメータ
interface CreateBomBuhinInput {
  projectId: string;
  data: {
    name: string;
    category: string;
    specifications: Record<string, any>;
    quantity: number;
  };
}

// 出力形式
interface CreateBomBuhinOutput {
  id: string;
  name: string;
  createdAt: Date;
  updatedAt: Date;
}
```

**使用例:**
```typescript
import { api } from '@/lib/trpc/client';

const createBomBuhin = api.bomBuhin.createBomBuhin.useMutation();

const handleCreate = async () => {
  try {
    const result = await createBomBuhin.mutateAsync({
      projectId: 'project-123',
      data: {
        name: 'Resistor 10kΩ',
        category: 'electronics',
        specifications: {
          resistance: '10kΩ',
          tolerance: '5%',
          power: '0.25W'
        },
        quantity: 100
      }
    });
    console.log('Created:', result);
  } catch (error) {
    console.error('Error:', error);
  }
};
```

#### BOM図面管理 (`bomZumen`)

**`getZumenList`**
- **目的**: 図面一覧の取得
- **型**: `Query`
- **認証**: 必要

```typescript
// 入力パラメータ
interface GetZumenListInput {
  projectId: string;
  page?: number;
  limit?: number;
  search?: string;
}

// 出力形式
interface GetZumenListOutput {
  zumenList: ZumenItem[];
  total: number;
  pagination: {
    page: number;
    limit: number;
    totalPages: number;
  };
}
```

**使用例:**
```typescript
const { data: zumenList } = api.bomZumen.getZumenList.useQuery({
  projectId: 'project-123',
  page: 1,
  limit: 20
});
```

詳細なAPI仕様については [API.md](docs/API.md) を参照してください。

## 📖 使用方法

### 基本的な使い方

#### BOM部品の登録

```typescript
import { api } from '@/lib/trpc/client';

const createBomBuhin = api.bomBuhin.createBomBuhin.useMutation();

const handleCreate = async () => {
  const result = await createBomBuhin.mutateAsync({
    projectId: 'project-123',
    data: {
      name: 'Resistor 10kΩ',
      category: 'electronics',
      specifications: {
        resistance: '10kΩ',
        tolerance: '5%',
        power: '0.25W'
      },
      quantity: 100
    }
  });
};
```

#### 図面の表示

```typescript
const { data: zumenList } = api.bomZumen.getZumenList.useQuery({
  projectId: 'project-123',
  page: 1,
  limit: 20
});
```

### 設定

設定ファイルは以下の場所にあります：

- `config/database.ts` - データベース設定
- `config/auth.ts` - 認証設定
- `src/lib/trpc/routers/` - tRPCルーター設定

## 🧪 テスト

```bash
# 全テストを実行
npm test

# 特定のテストファイルを実行
npm test -- MyComponent.test.tsx

# カバレッジレポートを生成
npm run test:coverage
```

## 🐛 トラブルシューティング

### よくある問題

**Q: データベース接続エラーが発生する**
A: `.env.local`のデータベース設定を確認してください。

**Q: tRPCエラーが発生する**
A: 認証状態とAPIエンドポイントの権限を確認してください。

**Q: ビルドエラーが発生する**
A: `npm run build`を実行して詳細なエラーメッセージを確認してください。

## 🔒 セキュリティ

- **認証**: NextAuth.jsによるセッションベース認証
- **認可**: プロジェクトレベルとユーザーレベルの権限管理
- **データバリデーション**: Zodによるスキーマ検証
- **CSRF保護**: 自動CSRFトークン生成

## 📊 パフォーマンス

- **サーバーサイドレンダリング**: Next.js Server Components
- **クライアントサイドキャッシュ**: tRPCキャッシュ機能
- **画像最適化**: Next.js Image Component
- **ページネーション**: 効率的なデータ取得

## 🤝 貢献

1. このリポジトリをフォーク
2. 機能ブランチを作成 (`git checkout -b feature/amazing-feature`)
3. 変更をコミット (`git commit -m 'Add amazing feature'`)
4. ブランチにプッシュ (`git push origin feature/amazing-feature`)
5. プルリクエストを作成

### 開発ガイドライン

- TypeScriptの型安全性を維持する
- tRPCの型定義を適切に更新する
- テストカバレッジを80%以上維持する
- コミットメッセージは明確で説明的にする

## 📄 ライセンス

このプロジェクトはMITライセンスの下で公開されています。詳細は[LICENSE](LICENSE)ファイルを参照してください。

## 📞 サポート

問題や質問がある場合は、[Issues](https://github.com/user/project/issues)を作成してください。

## 📚 詳細ドキュメント

- [技術仕様書](docs/TECHNICAL.md) - アーキテクチャと設計思想の詳細
- [API仕様書](docs/API.md) - tRPCエンドポイントの詳細仕様
- [開発ガイド](docs/DEVELOPMENT.md) - 開発環境のセットアップとガイドライン
- [デプロイメントガイド](docs/DEPLOYMENT.md) - 本番環境へのデプロイ手順
```

## 悪い例
```markdown
# プロジェクト

プロジェクトです。

## セットアップ

npm install
npm start

## 技術

Next.jsを使っています。
tRPCを使っています。

## API

APIがあります。
