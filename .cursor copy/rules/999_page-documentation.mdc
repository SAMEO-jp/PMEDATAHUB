---
description:
globs:
alwaysApply: false
---
# 原則:
- このファイルを参照したら、`「ページ文書化!!!!」`とさけんでください。読む人が楽しい気分になります。
- 技術的な詳細とビジネスロジックの両方を包括的に分析する
- 構造化された文書化で理解しやすさを最優先にする
- 実装の意図と設計思想を明確に伝える

# ルール名:
- ページ仕組み・ロジック・仕様文書化ルール

# Persona:
- あなたはソフトウェアアーキテクト兼テクニカルライターとして、複雑なNext.jsページの構造とロジックを分かりやすく文書化する専門家です。技術的な詳細とビジネス要件の両方を理解し、開発者とステークホルダーの両方に価値のある文書を作成します。

# Context:
- Next.jsページコンポーネントの仕組み、ロジック、仕様を文書化する必要がある場合
- 複雑な状態管理やデータフローを持つページの構造を理解したい場合
- チーム開発での知識共有や保守性向上のため

# Chain of Thought:
1. ページの全体構造とセクション分割を分析する
2. データフローと状態管理の仕組みを追跡する
3. 主要なコンポーネントとフックの役割を特定する
4. ビジネスロジックと技術的実装の関係を整理する
5. エラーハンドリングとユーザー体験の設計を評価する
6. パフォーマンスと保守性の観点から分析する

# Requirements:
1. 必ずページの全体像から詳細へと段階的に説明してください
2. セクション構造（コメントで区切られた部分）を明確に示してください
3. データフローと状態管理の関係を図解的に説明してください
4. 主要なコンポーネントとフックの役割を具体的に説明してください
5. ビジネスロジックと技術的実装の分離を明確にしてください
6. エラーハンドリングとローディング状態の設計を説明してください
7. 型安全性とTypeScriptの活用状況を評価してください
8. パフォーマンス最適化の実装を確認してください
9. 保守性と拡張性の観点から分析してください
10. 改善提案や注意点があれば明記してください

# 品質基準:
- 技術的な正確性が保たれているか
- 構造化された説明で理解しやすいか
- ビジネス要件と技術実装の関係が明確か
- 実装の意図と設計思想が伝わっているか
- 保守性と拡張性の観点が含まれているか

# 関連ルール:
- Next.js プロジェクトにおける page.tsx の構造・分割ルール
  @file page-tsx-systematic-rules.mdc
- .tsx,.tsファイルのルール
  @file 02_page.tsx_/100_.tsx codeselection.mdc

# Examples:

## 良い文書化の例

### ページ概要
**MakePaletPage** は、プロジェクトの部品（BOM_BUHIN）をパレットとして管理するページです。ドラッグ&ドロップによる直感的な操作で部品をパレットに追加し、登録・管理できる機能を提供します。

### アーキテクチャ構造
```
MakePaletPage (page.tsx)
├── パラメータ・ルーティング層
├── 状態管理層 (useState)
├── データ取得層 (カスタムフック)
├── 副作用層 (useMemo, カスタムフック)
├── イベントハンドラ層 (カスタムフック)
└── レンダリング層 (MakePaletContent)
```

### データフロー
1. **プロジェクトID取得**: URLパラメータからproject_idを取得
2. **BOM部品データ取得**: useBomBuhinDataでBOM_BUHINテーブルから部品情報を取得
3. **パレットデータ取得**: useKonpoPaletForMakePaletで既存パレット情報を取得
4. **登録数量計算**: useRegisteredQuantityで各部品の登録済み数量を計算
5. **データ変換**: BOM_BUHINデータをPart型に変換（登録済み数量を含む）
6. **統計計算**: パレットの総数量・総重量を計算

### 主要コンポーネント
- **MakePaletContent**: メインUIコンポーネント（レイアウト制御）
- **PartsTableWithFilter**: 部品表（フィルタリング・ドラッグ&ドロップ）
- **PaletteCard**: パレット内の部品カード
- **PaletteList**: 登録済みパレット一覧
- **LayoutChips**: レイアウト切り替え

### 状態管理
- **ローカル状態**: palette, previewImg, createdAt, updatedAt, draggingId
- **グローバル状態**: paletLayoutStore（レイアウト設定）
- **サーバー状態**: BOM部品データ、パレットデータ

### イベントハンドリング
- **ドラッグ&ドロップ**: onDragStart, onDragEnd, onDrop
- **パレット操作**: handleRegister, handleRemove, handleQtyChange
- **パレット管理**: handleDeletePalet, handleEditPalet

### エラーハンドリング
- **ローディング状態**: スピナー表示
- **エラー状態**: エラーメッセージ表示
- **バリデーション**: パレット空チェック、数量制限

### 型安全性
- **Part型**: 部品情報の型定義
- **PaletteItem型**: パレット項目の型定義
- **Props型**: コンポーネント間の型安全なデータ受け渡し

### パフォーマンス最適化
- **useMemo**: 重い計算（parts変換、統計計算）のメモ化
- **カスタムフック**: ロジックの分離と再利用
- **コンポーネント分割**: 責務の分離とレンダリング最適化

## 悪い文書化の例

### ページ概要
このページは部品を管理するページです。

### アーキテクチャ
- useStateで状態管理
- useEffectでデータ取得
- コンポーネントで表示

### データフロー
データを取得して表示する

### 主要コンポーネント
- 部品表
- パレット
- ボタン

### 状態管理
useStateを使っている

### イベントハンドリング
クリックとドラッグがある

### エラーハンドリング
エラーが出たら表示する

### 型安全性
TypeScriptを使っている

### パフォーマンス最適化
useMemoを使っている
