---
description: "開発サーバー起動時のポート管理ルール"
globs:
  - "**/*.{ts,tsx,js,jsx}"
alwaysApply: true
---

# 開発サーバーポート管理ルール

## 🎯 目的
開発サーバー起動時に、ポートの競合を避け、常にポート3000で起動するための自動チェックと管理を行う。

## 📋 ルール

### 1. 開発サーバー起動前の必須チェック
開発サーバーを起動する前に、必ず以下のチェックを実行すること：

#### ステップ1: 現在のプロセス確認
```bash
ps aux | grep -E "next|node" | grep -v grep | grep -v cursor
```

#### ステップ2: 使用中のポート確認
```bash
ss -tulpn | grep -E "3000|3001|3002" 2>/dev/null || netstat -tulpn 2>/dev/null | grep -E "3000|3001|3002"
```

### 2. ポート競合時の対応

#### パターン1: ポート3000が使用中の場合
**動作**: ユーザーに確認してから既存プロセスを停止し、ポート3000で起動する

```bash
# 1. ポート3000を使用しているプロセスを特定
lsof -ti:3000

# 2. ユーザーに確認メッセージを表示
echo "ポート3000が使用中です。既存のプロセスを停止しますか？ (y/n)"

# 3. 承認後、プロセスを停止
kill $(lsof -ti:3000)

# 4. ポート3000で起動
npm run dev
```

#### パターン2: ポート3000以外（3001, 3002など）が使用中の場合
**動作**: 自動的に既存プロセスを停止し、ポート3000で起動する

```bash
# 1. Next.js/Nodeプロセスを全て停止
pkill -f "next-server"

# 2. 念のためポート確認
ss -tulpn | grep 3000 || echo "ポート3000は空いています"

# 3. ポート3000で起動
npm run dev
```

### 3. 実装時の標準手順

#### テスト環境・開発サーバーを起動する際の自動化スクリプト

AI（Cursor）は、ユーザーが以下のコマンドを要求した場合、自動的にポートチェックを行う：
- `npm run dev`
- `next dev`
- 「開発サーバーを起動して」
- 「テスト環境を開いて」
- 「サーバーを立ち上げて」

#### 実行フロー
1. **ポート状態を確認**
2. **競合があれば対応**
3. **ポート3000で起動**
4. **起動完了を報告**

### 4. コマンド実行例

```bash
# ポート管理付き開発サーバー起動
# Step 1: 既存プロセス確認
echo "=== 既存プロセス確認 ==="
ps aux | grep -E "next-server" | grep -v grep

# Step 2: ポート確認
echo "=== ポート使用状況 ==="
ss -tulpn | grep -E ":300[0-9]"

# Step 3: 必要に応じて停止
if [ -n "$(lsof -ti:3000)" ]; then
  echo "ポート3000が使用中です。プロセスを停止します..."
  kill $(lsof -ti:3000)
  sleep 1
fi

# Step 4: ポート3000で起動
echo "=== ポート3000で開発サーバーを起動します ==="
npm run dev
```

### 5. エラーハンドリング

#### ケース1: プロセスが停止できない場合
```bash
# 強制終了を試行
kill -9 $(lsof -ti:3000)
```

#### ケース2: ポートが解放されない場合
```bash
# 数秒待機してから再試行
sleep 3
lsof -ti:3000 || echo "ポート解放完了"
```

## 🚨 重要な注意事項

1. **ポート3000を標準とする**: 他のポートは使用しない
2. **起動前に必ずチェック**: 自動化を徹底する
3. **ユーザー確認**: ポート3000使用中の場合は確認を取る
4. **ログ出力**: 各ステップで状況を報告する

## 📝 AI（Cursor）への指示

開発サーバー起動が要求された場合：

1. ✅ **必ず最初にポート状態を確認**
2. ✅ **競合があれば自動的に対応**
3. ✅ **ポート3000で起動**
4. ✅ **起動完了後、アクセスURLを報告**
   - 例: "開発サーバーが起動しました: http://localhost:3000"

## 🔧 トラブルシューティング

### 問題: ポートが解放されない
```bash
# すべてのNext.jsプロセスを強制終了
pkill -9 -f "next-server"
```

### 問題: 複数のポートが使用中
```bash
# 3000-3010のポートを全てチェックして停止
for port in {3000..3010}; do
  if lsof -ti:$port > /dev/null 2>&1; then
    echo "ポート$portを解放します"
    kill $(lsof -ti:$port)
  fi
done
```

## ✅ チェックリスト

開発サーバー起動時：
- [ ] 既存プロセスを確認した
- [ ] ポート使用状況を確認した
- [ ] 競合があれば適切に対応した
- [ ] ポート3000で起動した
- [ ] 起動完了を確認した
- [ ] アクセスURLを報告した

## 📚 関連コマンドリファレンス

```bash
# プロセス確認
ps aux | grep next-server

# ポート確認
ss -tulpn | grep 3000
lsof -ti:3000

# プロセス停止
kill $(lsof -ti:3000)
pkill -f "next-server"

# 開発サーバー起動
npm run dev
PORT=3000 npm run dev
```

## 🎯 実装例

### 例1: シンプルな起動
```bash
# 既存プロセスチェック → 停止 → 起動
pkill -f "next-server" 2>/dev/null; npm run dev
```

### 例2: 詳細なログ付き起動
```bash
echo "=== ポート3000管理 ==="
echo "既存プロセスを確認中..."
ps aux | grep next-server | grep -v grep && pkill -f "next-server" && echo "既存プロセスを停止しました"
echo "ポート3000を確認中..."
ss -tulpn | grep 3000 && echo "⚠️ ポート3000が使用中です" || echo "✅ ポート3000は空いています"
echo "開発サーバーを起動します..."
npm run dev
```

---

**このルールは常に適用されます（alwaysApply: true）**
