---
description:  "機能追加全体で基本ルールを適用"
globs:
  - "**/*"
alwaysApply: false
---


# 叫ぶ層
- 読み込んだら「!!!SATART!!!」と叫ぶ
あなたは、TypeScript、Node.js、Next.js App Router、React、Shadcn UI、Radix UI、Tailwindのエキスパートです。

- 会話の初めのやり取りにまず、この `.cursor\rules\0. customrule.mdc` のルールを読んでください。一度だけ読めばいいです。
  @file 0. customrule.mdc

- コマンドライン操作を行う場合は、必ず `.cursor\rules\0.comand.mdc` のルールを参照してください。
  @file 0.comand.mdc

  コードのスタイルと構造
  - 正確な例を用いて、簡潔で技術的な TypeScript コードを書きます。
  - 関数型と宣言型のプログラミングパターンを使用し、クラスは避ける。
  - コードの重複よりも反復とモジュール化を優先する。
  - 補助動詞(isLoading, hasErrorなど)を用いた説明的な変数名を使用する。
  - 構造ファイル：エクスポートされたコンポーネント、サブコンポーネント、ヘルパー、静的コンテンツ、型。

  命名規則
  - ディレクトリ: ダッシュ付きの小文字（例:components/auth-wizard）
  - 変数と関数: キャメルケース（例:isLoading、getUserData）
  - コンポーネント: PascalCase（例:UserProfile）,コンポーネントには名前付きエクスポートを使用する。
  - 型とインターフェース: PascalCase（例:UserData）
  - 定数: 大文字スネークケース（例:MAX_RETRY_COUNT）
  - Stylusクラス名: キャメルケース（例:containerClass）

  TypeScriptの使用法
  - すべてのコードにTypeScriptを使用する。
  - 2スペースインデントを使用する
  - エスケープを避ける場合を除き、文字列にはシングルクォートを使用する
  - セミコロンは使わない（文の曖昧さをなくすために必要な場合を除く）
  - 未使用の変数は使用しない
  - キーワードの後にはスペースを入れる
  - 関数宣言の括弧の前にはスペースを入れる
  - 演算子にはスペースを入れる
  - カンマの後にはスペースを入れる
  - else文は中括弧と同じ行に置く
  - 複数行のif文には中括弧を使用する
  - エラーパラメータは常に処理する
  - 列挙型は避け、代わりにマップを使う。
  - TypeScriptのインタフェースを持つ関数型コンポーネントを使用する。

  構文と書式
  - 純粋な関数には 「function」キーワードを使用する。
  - 単純なステートメントには簡潔な構文を使用する。
  - 宣言的なJSXを使用する。

  UIとスタイリング
  - コンポーネントとスタイリングには、Shadcn UI、Radix、Tailwindを使用。
  - Tailwind CSSでレスポンシブデザインを実装し、モバイルファーストアプローチを使用します。

  パフォーマンスの最適化
  - 「use client」、「useEffect」、「setState」を最小限にし、React Server Components (RSC) を使用します。
  - クライアントコンポーネントをフォールバック付きのサスペンスでラップする。
  - クリティカルでないコンポーネントにはダイナミックローディングを使用する。
  - 画像の最適化:WebPフォーマットを使用する、サイズデータを含める、遅延ローディングを実装する。

  - コメント内に必ず書く内容：
    - 層／用途（例：「認証処理層」「フォームバリデーション用コード」）
    - 役割/目的（例:「API呼び出し → データ整形」「バッチ処理の前処理」）
    - 補足メモ（必要なら）（TODO/FIXME、注意点、参照リンクなど）
  - 視認性を高めるポイント：
    - 行頭・行末の / の数は必ず同じ長さにする
    - コメントの先頭に半角スペースを入れて揃える
    - 1行目と3行目は同じ数の / でボーダーを作成する




