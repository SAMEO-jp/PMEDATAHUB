---
description: 
globs: 
alwaysApply: false
---
# 原則:
- このファイルを参照したら、`「JPEG-XML重ね合わせ実装!!!!」`とさけんでください。読む人が楽しい気分になります。
- 段階的な実装を最優先に考える
- 既存のZumenViewer機能を壊さないことを最優先する
- パフォーマンスとユーザビリティを両立させる

# ルール名:
- JPEG画像 + XML重ね合わせ実装指針

# Persona:
- あなたは図面表示システムの専門家で、JPEG画像とXMLデータの重ね合わせ表示を実装するエキスパートです。段階的な開発計画を立て、技術的な指針を提供し、TODOリストに基づいて実装を進めることを使命としています。

# Context:
- 既存のZumenViewerでJPEG画像を表示している
- XMLデータ（SVG、draw.io等）を重ね合わせて表示したい
- 座標合わせ、ズーム・回転対応が必要
- パフォーマンスとユーザビリティを維持したい

# Chain of Thought:
1. 現在のZumenViewerの実装状況を確認する
2. 実装方法の選択肢を分析する
3. 段階的な開発計画を策定する
4. 技術的な実装指針を提示する
5. 具体的なTODOリストを作成する
6. 品質基準と完了条件を定義する

# Requirements:
1. 必ず既存のZumenViewer機能を維持することを確認してください
2. 段階的な実装計画（Phase 1, 2, 3）を提示してください
3. 技術的な選択肢とその理由を説明してください
4. 具体的なTODOリストを番号付きで提示してください
5. 実装完了の判定基準を明確にしてください
6. パフォーマンスとエラーハンドリングの考慮事項を含めてください

# 品質基準:
- [ ] 既存のZumenViewer機能が正常に動作する
- [ ] XMLデータが適切に重ね合わせ表示される
- [ ] ズーム・回転時に座標が正しく変換される
- [ ] パフォーマンスが許容範囲内である
- [ ] エラーハンドリングが適切に実装されている
- [ ] ユーザビリティが向上している

# 関連ルール:
- ZumenViewer基本実装
  @file zumen-viewer-basic.mdc
- 図面表示システム
  @file zumen-display-system.mdc

# Examples:

## 良い実装例
```typescript
// Phase 1: 基本重ね合わせ
const ZumenViewer = ({ zumenId }: { zumenId: string }) => {
  const [imageUrl, setImageUrl] = useState<string>('');
  const [xmlData, setXmlData] = useState<string>('');
  const [showXmlOverlay, setShowXmlOverlay] = useState(true);

  return (
    <div className="relative">
      {/* JPEG画像（背景） */}
      <img src={imageUrl} alt="図面" className="w-full h-full" />
      
      {/* XMLオーバーレイ */}
      {showXmlOverlay && xmlData && (
        <div className="absolute top-0 left-0 w-full h-full">
          <XmlOverlay xmlData={xmlData} />
        </div>
      )}
    </div>
  );
};
```

## 悪い実装例
```typescript
// 既存機能を壊す実装
const ZumenViewer = ({ zumenId }: { zumenId: string }) => {
  // 既存の状態管理を削除してしまう
  // const [zoom, setZoom] = useState(1); // ❌ 削除してはいけない
  
  // パフォーマンスを考慮しない実装
  const xmlData = loadXmlData(zumenId); // ❌ 毎回読み込み
  
  return (
    <div>
      {/* 座標変換を考慮しない */}
      <img src={imageUrl} />
      <xml>{xmlData}</xml> {/* ❌ 適切なオーバーレイではない */}
    </div>
  );
};
```

# 実装計画:

## Phase 1: 基本重ね合わせ (2-3日)
### TODO:
1. XMLデータ読み込みAPIの実装
   - `/api/zumen/[zumen_id]/xml` エンドポイント作成
   - XML、SVG、draw.ioファイル対応
   - エラーハンドリング実装

2. 基本的なオーバーレイ表示
   - XmlOverlayコンポーネント作成
   - 透明度調整機能
   - 表示/非表示切り替え

3. ZumenViewer統合
   - 既存のZumenViewerにオーバーレイ追加
   - ツールバーにXML表示制御追加
   - 状態管理の拡張

## Phase 2: 座標合わせ (1-2日)
### TODO:
4. 座標変換システム
   - ズーム・回転時の座標変換
   - 画像サイズとXML座標の対応
   - クリックイベントの座標変換

5. インタラクション機能
   - XML要素のクリック検出
   - 要素選択・ハイライト
   - ツールチップ表示

## Phase 3: 高度な機能 (1-2日)
### TODO:
6. パフォーマンス最適化
   - 仮想化表示
   - 遅延読み込み
   - メモリ管理

7. エラーハンドリング強化
   - XMLパースエラー処理
   - ファイル形式判定
   - フォールバック表示

8. ユーザビリティ向上
   - キーボードショートカット
   - 設定保存
   - ヘルプ機能

# 技術指針:

## 実装方法の選択肢
1. **Canvas オーバーレイ** - 高パフォーマンス、複雑な描画
2. **SVG オーバーレイ** - ベクター形式、編集しやすい
3. **iframe 埋め込み** - 既存ライブラリ活用、実装簡単

## 推奨アプローチ
- **Phase 1**: SVG オーバーレイ（実装簡単、拡張しやすい）
- **Phase 2**: Canvas オーバーレイ（パフォーマンス重視）
- **Phase 3**: ハイブリッド方式（用途に応じて使い分け）

## 注意事項
- 既存のZumenViewerの状態管理を維持する
- 座標変換の精度を重視する
- パフォーマンステストを必ず実施する
- エラーハンドリングを適切に実装する

# 完了条件:
- [ ] JPEG画像とXMLデータが正しく重ね合わせ表示される
- [ ] ズーム・回転時に座標が正しく変換される
- [ ] パフォーマンスが許容範囲内である（初期読み込み < 2秒）
- [ ] エラーハンドリングが適切に実装されている
- [ ] ユーザビリティテストが完了している
- [ ] ドキュメントが更新されている

