---
description: 
globs: 
alwaysApply: false
---
# 叫ぶ層
- 読み込んだら「は!!!4. layout_header.mdc!!!」と叫ぶ

# ヘッダー設計・実装ルール

## 📋 基本原則

### ヘッダーの役割
- **ナビゲーション**: 主要なページへの導線提供
- **ブランディング**: アプリケーションのアイデンティティ表示
- **ユーザー情報**: ログイン状態、ユーザー名、アバター表示
- **アクション**: 検索、通知、設定などの主要アクション
- **ブレッドクラム**: 現在位置の表示

### 設計方針
- 機能ベースのディレクトリ構造を採用
- 状態管理は Zustand を使用し、適切に分離
- レスポンシブデザインを最優先
- アクセシビリティを考慮した実装

## 🏗️ ディレクトリ構造

### 推奨構造
```
src/features/header/
├── components/                    # ヘッダー関連コンポーネント
│   ├── HeaderTitle.tsx           # アプリタイトル・ロゴ
│   ├── HeaderNavigation.tsx      # メインナビゲーション
│   ├── HeaderBreadcrumbs.tsx     # ブレッドクラム
│   ├── HeaderUserMenu.tsx        # ユーザーメニュー
│   ├── HeaderActions.tsx         # アクションボタン群
│   ├── HeaderMobileMenu.tsx      # モバイルメニュー
│   └── HeaderSearch.tsx          # 検索機能
├── hooks/                        # カスタムフック
│   ├── useHeaderState.ts         # ヘッダー状態管理
│   ├── useHeaderActions.ts       # ヘッダーアクション
│   ├── useBreadcrumbs.ts         # ブレッドクラム管理
│   └── useNavigation.ts          # ナビゲーション管理
├── store/                        # 機能内のZustandスライス
│   ├── headerSlice.ts            # ヘッダー状態スライス
│   └── header.types.ts           # ヘッダー型定義
├── utils/                        # ユーティリティ関数
│   ├── breadcrumbUtils.ts        # ブレッドクラム生成
│   ├── navigationUtils.ts        # ナビゲーション処理
│   └── headerUtils.ts            # ヘッダー共通処理
├── constants/                    # 定数定義
│   ├── navigationConstants.ts    # ナビゲーション定数
│   ├── headerConstants.ts        # ヘッダー定数
│   └── routes.ts                 # ルート定義
├── CommonHeader.tsx              # メインのHeaderコンポーネント
└── index.ts                      # 外部に公開するもののエントリーポイント
```

## ✅ 実装ルール

### メインコンポーネント (`CommonHeader.tsx`)
```tsx
// src/features/header/CommonHeader.tsx
'use client'

import { HeaderTitle } from './components/HeaderTitle'
import { HeaderNavigation } from './components/HeaderNavigation'
import { HeaderBreadcrumbs } from './components/HeaderBreadcrumbs'
import { HeaderUserMenu } from './components/HeaderUserMenu'
import { HeaderActions } from './components/HeaderActions'
import { HeaderMobileMenu } from './components/HeaderMobileMenu'
import { useHeaderState } from './hooks/useHeaderState'

export const CommonHeader = () => {
  const { isMobileMenuOpen, toggleMobileMenu } = useHeaderState()

  return (
    <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div className="container flex h-14 items-center">
        {/* デスクトップレイアウト */}
        <div className="hidden md:flex md:flex-1 md:items-center md:justify-between">
          <div className="flex items-center space-x-4">
            <HeaderTitle />
            <HeaderNavigation />
          </div>
          <div className="flex items-center space-x-4">
            <HeaderActions />
            <HeaderUserMenu />
          </div>
        </div>
      </div>
      
      {/* ブレッドクラム */}
      <HeaderBreadcrumbs />
    </header>
  )
}
```

### 状態管理 (`headerSlice.ts`)
```tsx
// src/features/header/store/headerSlice.ts
import { create } from 'zustand'
import { HeaderState, HeaderActions } from './header.types'

export const useHeaderStore = create<HeaderState & HeaderActions>((set) => ({
  // 状態
  isMobileMenuOpen: false,
  currentPath: '/',
  breadcrumbs: [],
  notifications: [],
  
  // アクション
  toggleMobileMenu: () => set((state) => ({ 
    isMobileMenuOpen: !state.isMobileMenuOpen 
  })),
  setCurrentPath: (path: string) => set({ currentPath: path }),
  setBreadcrumbs: (breadcrumbs: Breadcrumb[]) => set({ breadcrumbs }),
  addNotification: (notification: Notification) => set((state) => ({
    notifications: [...state.notifications, notification]
  })),
  clearNotifications: () => set({ notifications: [] }),
}))
```

### 型定義 (`header.types.ts`)
```tsx
// src/features/header/store/header.types.ts
export interface Breadcrumb {
  label: string
  href: string
  isActive?: boolean
}

export interface Notification {
  id: string
  type: 'info' | 'success' | 'warning' | 'error'
  message: string
  timestamp: Date
}

export interface HeaderState {
  isMobileMenuOpen: boolean
  currentPath: string
  breadcrumbs: Breadcrumb[]
  notifications: Notification[]
}

export interface HeaderActions {
  toggleMobileMenu: () => void
  setCurrentPath: (path: string) => void
  setBreadcrumbs: (breadcrumbs: Breadcrumb[]) => void
  addNotification: (notification: Notification) => void
  clearNotifications: () => void
}
```

### カスタムフック (`useHeaderState.ts`)
```tsx
// src/features/header/hooks/useHeaderState.ts
import { useHeaderStore } from '../store/headerSlice'
import { usePathname } from 'next/navigation'
import { useEffect } from 'react'
import { generateBreadcrumbs } from '../utils/breadcrumbUtils'

export const useHeaderState = () => {
  const pathname = usePathname()
  const {
    isMobileMenuOpen,
    currentPath,
    breadcrumbs,
    toggleMobileMenu,
    setCurrentPath,
    setBreadcrumbs,
  } = useHeaderStore()

  // パス変更時の処理
  useEffect(() => {
    if (pathname !== currentPath) {
      setCurrentPath(pathname)
      const newBreadcrumbs = generateBreadcrumbs(pathname)
      setBreadcrumbs(newBreadcrumbs)
    }
  }, [pathname, currentPath, setCurrentPath, setBreadcrumbs])

  return {
    isMobileMenuOpen,
    breadcrumbs,
    toggleMobileMenu,
  }
}
```

### ブレッドクラムユーティリティ (`breadcrumbUtils.ts`)
```tsx
// src/features/header/utils/breadcrumbUtils.ts
import { Breadcrumb } from '../store/header.types'

export const generateBreadcrumbs = (pathname: string): Breadcrumb[] => {
  const segments = pathname.split('/').filter(Boolean)
  const breadcrumbs: Breadcrumb[] = [
    { label: 'ホーム', href: '/', isActive: pathname === '/' }
  ]

  let currentPath = ''
  segments.forEach((segment, index) => {
    currentPath += `/${segment}`
    const isLast = index === segments.length - 1
    
    breadcrumbs.push({
      label: formatSegmentLabel(segment),
      href: currentPath,
      isActive: isLast
    })
  })

  return breadcrumbs
}

const formatSegmentLabel = (segment: string): string => {
  // セグメントを読みやすいラベルに変換
  const labelMap: Record<string, string> = {
    'dashboard': 'ダッシュボード',
    'projects': 'プロジェクト',
    'settings': '設定',
    // 必要に応じて追加
  }
  
  return labelMap[segment] || segment.charAt(0).toUpperCase() + segment.slice(1)
}
```

## 🎨 スタイリングルール

### レスポンシブデザイン
- モバイルファーストアプローチ
- ブレークポイント: `sm:`, `md:`, `lg:`, `xl:`
- ハンバーガーメニューは `md:hidden`
- デスクトップナビゲーションは `hidden md:flex`

### アクセシビリティ
```tsx
// アクセシビリティを考慮したボタン実装例
<button
  aria-label="メニューを開く"
  aria-expanded={isMobileMenuOpen}
  aria-controls="mobile-menu"
  onClick={toggleMobileMenu}
  className="p-2 rounded-md hover:bg-accent"
>
  <Menu className="h-5 w-5" />
</button>
```

### アニメーション
```tsx
// Framer Motion を使用したスムーズなアニメーション
import { motion, AnimatePresence } from 'framer-motion'

<AnimatePresence>
  {isMobileMenuOpen && (
    <motion.div
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.2 }}
      className="absolute top-full left-0 w-full bg-background border-b"
    >
      {/* モバイルメニュー内容 */}
    </motion.div>
  )}
</AnimatePresence>
```

## 🔧 統合ルール

### Root Layout との統合
```tsx
// src/app/layout.tsx
import { CommonHeader } from '@/features/header'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="ja">
      <body>
        <CommonHeader />
        <main className="min-h-screen pt-14">
          {children}
        </main>
      </body>
    </html>
  )
}
```

### 認証状態との連携
```tsx
// src/features/header/components/HeaderUserMenu.tsx
import { useAuthStore } from '@/store/slices/authSlice'

export const HeaderUserMenu = () => {
  const { user, isAuthenticated, logout } = useAuthStore()

  if (!isAuthenticated) {
    return (
      <div className="flex items-center space-x-2">
        <Button variant="ghost" asChild>
          <Link href="/login">ログイン</Link>
        </Button>
        <Button asChild>
          <Link href="/register">新規登録</Link>
        </Button>
      </div>
    )
  }

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="relative h-8 w-8 rounded-full">
          <Avatar className="h-8 w-8">
            <AvatarImage src={user?.avatar} alt={user?.name} />
            <AvatarFallback>{user?.name?.charAt(0)}</AvatarFallback>
          </Avatar>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent className="w-56" align="end" forceMount>
        <DropdownMenuLabel className="font-normal">
          <div className="flex flex-col space-y-1">
            <p className="text-sm font-medium leading-none">{user?.name}</p>
            <p className="text-xs leading-none text-muted-foreground">
              {user?.email}
            </p>
          </div>
        </DropdownMenuLabel>
        <DropdownMenuSeparator />
        <DropdownMenuItem asChild>
          <Link href="/profile">プロフィール</Link>
        </DropdownMenuItem>
        <DropdownMenuItem asChild>
          <Link href="/settings">設定</Link>
        </DropdownMenuItem>
        <DropdownMenuSeparator />
        <DropdownMenuItem onClick={logout}>
          ログアウト
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}
```

## 🚨 避けるべきパターン

- ❌ **ヘッダー内でビジネスロジックを実装**
- ❌ **グローバル状態の直接操作**
- ❌ **ハードコードされたナビゲーション**
- ❌ **レスポンシブ対応の不備**
- ❌ **アクセシビリティの無視**
- ❌ **過度に複雑なコンポーネント**
- ❌ **型安全性を無視した実装**

## 📋 実装チェックリスト

- [ ] 機能ベースのディレクトリ構造に従っているか
- [ ] 適切な状態管理が実装されているか
- [ ] レスポンシブデザインが実装されているか
- [ ] アクセシビリティが考慮されているか
- [ ] 型安全性が確保されているか
- [ ] ブレッドクラムが正しく生成されているか
- [ ] モバイルメニューが適切に動作するか
- [ ] 認証状態との連携が実装されているか
- [ ] アニメーションがスムーズに動作するか
- [ ] エラーハンドリングが実装されているか

## 🔗 関連ルール

- レイアウト全体の実装は `.cursor\rules\4. layout` を参照してください。
  @file 4. layout

- API 呼び出しは `.cursor\rules\2.api-patterns.mdc` を参照してください。
  @file 2.api-patterns.mdc

- コンポーネント実装は `.cursor\rules\1.0.tsx.mdc` を参照してください。
  @file 1.0.tsx.mdc


