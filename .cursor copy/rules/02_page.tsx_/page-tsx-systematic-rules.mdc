---
description: .tsx,.tsファイルのルール
globs: 
alwaysApply: false
---
---
description: ".tsx,.tsファイルのルール"
globs:
  - "src/**/*.tsx"
  - "src/**/*.ts"
alwaysApply: false
ruleType: Agent Requested
tags:
  - .tsx
  - .ts
priority: 2
version: "1.1.0"
---


# デバッグヘッダー層（旧: 叫ぶ層）
# !! DEBUG: このルールが読み込まれました
- **Rule File:** `page-tsx-systematic-rules.mdc`
- **Description:** Next.js プロジェクトにおける page.tsx の体系的実装ルール集約

# Next.js page.tsx 体系的実装ルール

## 概要

このルールファイルは、Next.js プロジェクトにおける page.tsx の実装に関する複数のルールファイルを体系的にまとめたものです。以下のルールファイルの内容を統合し、実装時の判断基準を明確化しています。

### 参照ルールファイル
- **1 .page.tsx.mdc** - 基本構造・分割ルール
  @file 1 .page.tsx.mdc
- **1.0.tsx.mdc** - .tsx作成ルール
  @file 1.0.tsx.mdc
- **1.1.tsx-section-name.mdc** - .tsxのセクション名前
  @file 1.1.tsx-section-name.mdc
- **1.2.tsx codeselection.mdc** - .tsxのセクション説明
  @file 1.2.tsx codeselection.mdc
- **1.2page-record.mdc** - ファイル更新時のルール
  @file 1.2page-record.mdc
- **page-patterns copy.mdc** - 新規作成時のパターン
  @file page-patterns copy.mdc

---

## 1. 実装区分と適用ルール

### 1.1. 新規作成時のルール

#### 適用条件
- 完全に新しいページを作成する場合
- 既存ページをコピーして新しいページを作成する場合
- 機能追加で新しいページが必要になった場合

#### 必須参照ルール
- **page-patterns copy.mdc** - 新規作成時のパターン
- **1.0.tsx.mdc** - .tsx作成ルール
- **1.1.tsx-section-name.mdc** - セクション構造ルール

#### 実装手順
1. **セクション構造の決定** - 1.1.tsx-section-name.mdc に従ってセクションを配置
2. **ファイル分割の判断** - page-patterns copy.mdc の分割基準を適用
3. **命名規則の適用** - 1.0.tsx.mdc の命名規則を遵守
4. **レイアウト継承** - mainページのレイアウトを継承（独自layout.tsxは作成しない）

### 1.2. 既存ファイル変更時のルール

#### 適用条件
- 既存ページの機能を修正・拡張する場合
- バグ修正を行う場合
- パフォーマンス改善を行う場合
- リファクタリングを行う場合

#### 必須参照ルール
- **1.2page-record.mdc** - ファイル更新時のルール
- **1.2.tsx codeselection.mdc** - セクション説明

#### 実装手順
1. **現在のコード分析** - ファイル構造と依存関係を把握
2. **セクション構造の整理** - 不適切な配置を修正
3. **段階的な変更** - 小さな変更から順次実行
4. **動作確認** - 各段階で動作を確認

---

## 2. セクション構造ルール（必須）

### 2.1. 統一されたセクション構造

以下の順序でセクションごとに明示的なコメントを入れてセクション構造を記述すること：

```tsx
// ==========================================
// インポート層
// ==========================================

// ==========================================
// 型定義層（Props, 内部型, API型）
// ==========================================

// ==========================================
// パラメータとルーティング層（searchParams, params, useParams, useRouter, useSearchParams）
// ==========================================

// ==========================================
// 状態管理層（useState, useReducer, Zustand）
// ==========================================

// ==========================================
// データ取得層（Server Components: async/await, Client Components: useEffect, use hooks）
// ==========================================

// ==========================================
// ビジネスロジック層（データ加工・計算・検証）
// ==========================================

// ==========================================
// 検証・バリデーション層（入力値チェック、データ整合性）
// ==========================================

// ==========================================
// 変換・フォーマット層（データ変換、表示用フォーマット）
// ==========================================

// ==========================================
// エラーハンドリング層（エラー処理、フォールバック）
// ==========================================

// ==========================================
// 副作用層（useMemo, useCallback）
// ==========================================

// ==========================================
// イベントハンドラ層（onClick, onSubmit, onChange）
// ==========================================

// ==========================================
// レンダリング層（JSX return）
// ==========================================
```

### 2.2. セクション配置の原則
- 不要なセクションは削除する
- 各セクションは指定された順序で配置する
- セクション内のコードは責任を明確に分離する
- コメントは明確で分かりやすく記述する

---

## 3. ファイル分割ルール

### 3.1. 分割判断基準
- **1セクションが 50行を超える場合** → 外部ファイルに分離を検討
- **page.tsx 全体が 200行を超える場合** → 段階的に分割を開始
- **JSXがネスト3階層を超える場合** → components/ に切り出し
- **複数のAPI呼び出しがある場合** → カスタムフックに集約

### 3.2. 分離先と命名規則

| 目的 | 分離先 | 命名例 | 説明 |
|---|-----|-----|---|
| データ取得・副作用 | `hooks/` | `useXxxData.ts`, `useXxxActions.ts` | データ取得とアクションを分離 |
| UI構成要素 | `components/` | `XxxTable.tsx`, `XxxHeader.tsx` | 再利用可能なUIコンポーネント |
| イベントハンドラ | `handlers/` | `useXxxHandlers.ts` | 複雑なイベント処理 |
| 固定データ・定数 | `constants/` | `statuses.ts`, `labels.ts` | アプリケーション定数 |
| APIクライアント | `lib/api/` | `fetchXxxList.ts` | API呼び出し関数 |
| 型定義 | `types/` | `xxx.types.ts` | 型定義の集約 |
| ユーティリティ | `utils/` | `xxxUtils.ts` | ヘルパー関数 |

### 3.3. 推奨ディレクトリ構成
```
app/
└─ [feature]/
   ├─ page.tsx                    # メインページ
   ├─ loading.tsx                 # ローディング状態
   ├─ error.tsx                   # エラー処理
   ├─ not-found.tsx              # 404ページ
   ├─ components/                 # UIコンポーネント（必要時のみ）
   │  ├─ XxxHeader.tsx
   │  ├─ XxxTable.tsx
   │  ├─ XxxForm.tsx
   │  └─ index.ts                 # エクスポート集約
   ├─ hooks/                      # カスタムフック（必要時のみ）
   │  ├─ useXxxData.ts
   │  ├─ useXxxActions.ts
   │  └─ useXxxHandlers.ts
   ├─ constants/                  # 定数（必要時のみ）
   │  ├─ statuses.ts
   │  └─ labels.ts
   ├─ types/                      # 型定義（必要時のみ）
   │  └─ xxx.types.ts
   ├─ utils/                      # ユーティリティ（必要時のみ）
   │  └─ xxxUtils.ts
   ├─ lib/                        # API・外部ライブラリ（必要時のみ）
   │  └─ api/
   │      └─ fetchXxxList.ts
   └─ store/                      # 状態管理（必要時のみ）
       └─ xxxStore.ts
```

---

## 4. 命名規則

### 4.1. ファイル名
- **PascalCase**: `UserProfile.tsx`, `DataTable.tsx`
- **機能を表す名前**: `UserList.tsx`, `ProjectCard.tsx`
- **接尾辞の統一**: `Table.tsx`, `Form.tsx`, `Card.tsx`, `Modal.tsx`

### 4.2. コンポーネント名
- **PascalCase**: `UserProfile`, `DataTable`
- **機能を表す名前**: `UserList`, `ProjectCard`
- **接尾辞の統一**: `Table`, `Form`, `Card`, `Modal`

### 4.3. フック名
- **use** プレフィックス: `useUserData`, `useProjectActions`
- **機能を表す名前**: `useFetchUsers`, `useHandleSubmit`
- **データ取得型**: `useGetUsersDate`, `useGet`

### 4.4. 型名
- **PascalCase**: `UserData`, `ProjectConfig`
- **Interface**: `IUserData` または `UserData`
- **Type**: `UserStatus`, `ProjectType`

---

## 5. ヘッダー規則

### 5.1. 基本ファイルヘッダー方針
```tsx
// ==========================================
// ファイル名: ComponentName.tsx
// 機能: このコンポーネントの主要な機能を簡潔に説明
// 技術: 使用している主要な技術やライブラリ
// 作成者: 作成者名（オプション）
// 作成日: YYYY-MM-DD（オプション）
// 更新履歴: 重要な変更があれば記載（オプション）
// ==========================================
```

### 5.2. Client Component ヘッダー
```tsx
'use client';
// ==========================================
// ファイル名: ComponentName.tsx
// 機能: このコンポーネントの主要な機能を簡潔に説明
// 技術: 使用している主要な技術やライブラリ
// 作成者: 作成者名（オプション）
// 作成日: YYYY-MM-DD（オプション）
// 更新履歴: 重要な変更があれば記載（オプション）
// ==========================================
```

---

## 6. レイアウトに関する制約

### 6.1. レイアウト継承の方針
- **layout.tsx ファイルは作成しない**
- **個別ページにレイアウトコンポーネントを作成しない**
- **mainページ（app/layout.tsx）のレイアウト構造を継承する**
- **ページ固有のレイアウトが必要な場合は、mainページのレイアウトを拡張する**

### 6.2. レイアウト実装パターン
```tsx
// ❌ 避けるべき：個別ページでのレイアウトコンポーネント作成
// app/[feature]/components/FeatureLayout.tsx
export default function FeatureLayout({ children }: { children: React.ReactNode }) {
  return (
    <div className="feature-layout">
      <FeatureHeader />
      <main>{children}</main>
      <FeatureFooter />
    </div>
  );
}

// ✅ 推奨：mainページのレイアウトを継承
// app/layout.tsx で共通レイアウトを定義
export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="ja">
      <body>
        <Header />
        <Sidebar />
        <main className="main-content">
          {children}
        </main>
        <Footer />
      </body>
    </html>
  );
}

// ✅ 推奨：page.tsxは直接コンテンツを返す
export default function Page() {
  return (
    <div className="page-content">
      <PageHeader title="データ一覧" />
      <DataTable data={data} />
      <Pagination page={page} limit={limit} />
    </div>
  );
}
```

---

## 7. Next.js 14+ 特有の実装パターン

### 7.1. Server Components vs Client Components
```tsx
// Server Component（デフォルト）
export default async function Page() {
  const data = await fetchData(); // サーバーサイドで実行
  return <ClientComponent data={data} />;
}

// Client Component（必要時のみ）
'use client';
export default function ClientComponent({ data }: Props) {
  const [state, setState] = useState();
  // インタラクティブな処理
}
```

### 7.2. データ取得パターン
```tsx
// Server Component でのデータ取得
async function getData() {
  const res = await fetch('https://api.example.com/data', {
    cache: 'no-store', // または 'force-cache'
    next: { revalidate: 3600 } // ISR
  });
  return res.json();
}

// Client Component でのデータ取得
const useData = () => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    fetchData().then(setData).finally(() => setLoading(false));
  }, []);
  
  return { data, loading };
};
```

---

## 8. 実装時のチェックリスト

### 8.1. 新規作成時のチェックリスト
- [ ] セクション構造ルールに従っているか
- [ ] 適切なServer/Client Componentの選択をしているか
- [ ] ファイルサイズが200行以下になっているか
- [ ] 必要に応じてフォルダ分割を行っているか
- [ ] 独自layout.tsxを作成していないか
- [ ] mainページのレイアウトを継承しているか
- [ ] 型安全性が確保されているか
- [ ] エラーハンドリングが実装されているか
- [ ] 型は、typesフォルダに集められているか
- [ ] データ取得層は、hooksに別だししているか。またデータ取得のコードだけのファイルに分離できているか？
- [ ] uiフォルダのインポートは、"@ui/*"のパスで読めているか？
- [ ] 不要な層は削除したか

### 8.2. 既存ファイル変更時のチェックリスト
- [ ] 現在のコード分析が完了しているか
- [ ] セクション構造の整理が完了しているか
- [ ] 段階的な変更が行われているか
- [ ] 各段階で動作確認が行われているか
- [ ] 変更影響範囲の分析が完了しているか

---

## 9. 避けるべきパターン

### 9.1. 新規作成時
- ❌ **page.tsx にビジネスロジックを書く**
- ❌ **大きなコンポーネントを1つのファイルに書く**
- ❌ **型定義をインラインで書く**
- ❌ **ハードコードされた値**
- ❌ **適切でないエラーハンドリング**
- ❌ **パフォーマンスを考慮しない実装**
- ❌ **独自layout.tsxファイルの作成**
- ❌ **個別ページにレイアウトコンポーネントを作成**
- ❌ **不要なフォルダの作成**
- ❌ **Server/Client Componentの混在**
- ❌ **useState/useReducerでの複雑な状態管理（Zustandを使用）**

### 9.2. 全般
- ❌ **インラインスタイルの多用**
- ❌ **インライン関数の多用**
- ❌ **大きなコンポーネントの作成**
- ❌ **型定義のインライン化**
- ❌ **ハードコードされた値**
- ❌ **適切でないエラーハンドリング**
- ❌ **パフォーマンスを考慮しない実装**
- ❌ **アクセシビリティの無視**
- ❌ **セマンティックでないHTML**
- ❌ **不要な再レンダリング**
- ❌ **型安全性の無視**

---

## 10. 推奨パターン

- ✅ **適切な型定義**
- ✅ **パフォーマンス最適化**
- ✅ **エラーハンドリング**
- ✅ **アクセシビリティ対応**
- ✅ **セマンティックHTML**
- ✅ **コンポーネントの分割**
- ✅ **テストの実装**
- ✅ **命名規則の統一**
- ✅ **状態管理の適切な使用**

---

## 11. 関連ルール

### 11.1. API実装ルール
- **2.api-patterns.mdc** - API呼び出しの実装パターン
  @file 2.api-patterns.mdc

### 11.2. 品質基準
- **quality-standards.mdc** - コード品質基準
  @file quality-standards.mdc

---

## 12. 運用上の注意

### 12.1. ルール適用時
- 新規作成時は **page-patterns copy.mdc** を優先参照
- 既存ファイル変更時は **1.2page-record.mdc** を優先参照
- セクション構造は **1.1.tsx-section-name.mdc** を必ず遵守
- 命名規則は **1.0.tsx.mdc** を必ず遵守

### 12.2. トラブルシューティング
- セクション構造が不明な場合は **1.2.tsx codeselection.mdc** を参照
- ファイル分割の判断に迷った場合は **page-patterns copy.mdc** の分割基準を適用
- レイアウトに関する問題は **page-patterns copy.mdc** のレイアウト制約を確認

### 12.3. 品質管理
- 定期的にチェックリストを確認
- ファイルサイズの監視
- セクション構造の遵守確認
- 命名規則の統一確認

