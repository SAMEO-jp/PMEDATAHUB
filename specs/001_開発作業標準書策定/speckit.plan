# PLMデータベース拡張・標準書実践検証プロジェクト計画

**プロジェクト期間**: 2025-10-17 〜
**目的**: Prismaスキーマのデータ追加作業を通じて、開発作業標準書の実践検証とドキュメント改善を行う

## 現状分析

### 既存Prismaスキーマ構成
```
src/apps/plm/prismas/prisma.prisma:
├── EmployeeStatusHistory    (社員在籍履歴)
├── EmployeeInfo            (社員情報)
├── PositionHistory         (履歴付き役職情報)
├── DepartmentInfo          (部署情報)
├── DepartmentInfoHistory   (所属部署情報履歴)
└── PersonalInfoHistory     (履歴付き個人情報)
```

### 検証対象標準書
- `docs/standards/002_データベース開発作業標準書.md`
- `docs/standards/001_MVP開発作業標準書.md`
- `docs/standards/003_画面作成作業標準書.md`

## Phase 1: データベース作業標準書の確立（Week 1）

### 1.1 既存スキーマの完全性確認と必要最小限の追加
**基本方針**:
- **既存DBの活用を最優先** - 新規DB作成は明示的な依頼がない限り実施しない
- 既存テーブル構造の理解と活用
- 必要最小限のテーブル・カラム追加のみ実施

**作業内容**:
- 既存スキーマのリレーション完全性確認
- 欠落している必須設定の特定（generator/datasource）
- 既存テーブルで対応できない機能のみ新規テーブル検討

**必須追加項目**:
- generator/datasourceブロックの追加（現在未設定）
- 会社付与情報テーブル（company_info_id参照先が未定義）

**検討対象の追加データ**:
- スキル・資格履歴（PersonalInfoHistoryで対応可能かまず検証）
- プロジェクト配属履歴（DepartmentInfoHistoryで対応可能かまず検証）
- 評価履歴（PositionHistoryで対応可能かまず検証）

### 1.2 既存DB安全拡張の実践
**作業内容**:
- 既存スキーマのバックアップ作成
- 最小限の設定追加（generator/datasource）
- 必要最小限のテーブル追加
- 既存データ整合性の確認

**DB拡張の判断基準**:
1. **既存テーブルでの対応可能性を最優先で検証**
2. カラム追加で対応可能な場合は新規テーブル作成しない
3. 新規テーブルは既存構造で絶対に対応不可能な場合のみ
4. 明示的な新規DB作成依頼がない限り、別DBは作成しない

### Phase 1 KPI: データベース作業標準書の確立
**目標**: 実践検証を通じたデータベース開発標準書v2.0の完成

**成果物**:
- [ ] 実践検証済み「002_データベース開発作業標準書v2.0.md」
- [ ] 既存DB活用判断フローチャート
- [ ] DB拡張時のチェックリスト（詳細版）
- [ ] マイグレーション実行手順書（実践版）
- [ ] トラブルシューティングガイド（DB編）

**実践テスト**:
- [ ] 標準書に従って`/home/same/Desktop/PMEDATAHUB/src/apps/plm/prismas/prisma.prisma`にgenerator/datasource設定を追加
- [ ] 標準書に従って会社付与情報テーブルを追加
- [ ] マイグレーション実行がエラーなく完了
- [ ] Prismaクライアント生成がエラーなく完了
- [ ] 既存テーブルとの整合性チェックがパス

**検証完了基準**:
- 標準書通りの手順でDB拡張が100%完了
- 既存データの整合性が100%保持
- 標準書の不足項目が全て特定・追加済み
- 他の開発者が標準書のみで同じ作業を実行可能
- **実践テスト項目が全てエラーなく完了**

## Phase 2: API・DAL作業標準書の確立（Week 2）

### 2.1 tRPCルーター追加
**作業内容**:
- 新規テーブル用tRPCルーター作成
- CRUD操作API実装
- 入力バリデーション追加

### 2.2 DAL層設計
**作業内容**:
- データアクセス層の構造化
- クエリ最適化の実装
- トランザクション管理

### Phase 2 KPI: API・DAL作業標準書の確立
**目標**: 実践検証を通じたAPI・DAL開発標準書の完成

**成果物**:
- [ ] tRPC実装標準書（新規作成）
- [ ] DAL層設計標準書（新規作成）
- [ ] API配置・命名規則ガイド
- [ ] エラーハンドリング標準パターン集
- [ ] パフォーマンス最適化チェックリスト

**実践テスト**:
- [ ] 標準書に従ってPLM用tRPCルーターを作成
- [ ] 標準書に従って社員情報CRUD APIを実装
- [ ] 標準書に従って会社付与情報CRUD APIを実装
- [ ] tRPCサーバー起動がエラーなく完了
- [ ] API呼び出しテストが全てパス
- [ ] TypeScript型チェックがエラーなく完了

**検証完了基準**:
- 標準書通りの手順でAPI実装が100%完了
- コード配置場所の判断が明確化
- エラーハンドリングパターンが統一化
- 他の開発者が標準書のみで同じAPI実装が可能
- **実践テスト項目が全てエラーなく完了**

## Phase 3: UI作業標準書の確立（Week 3）

### 3.1 データ登録画面作成
**作業内容**:
- 社員情報登録フォーム実装
- バリデーション機能追加
- エラーハンドリング実装

### 3.2 データ表示・管理画面
**作業内容**:
- 一覧表示機能実装
- 検索・フィルタリング機能
- 履歴表示機能

### Phase 3 KPI: UI作業標準書の確立
**目標**: 実践検証を通じた画面作成標準書v2.0の完成

**成果物**:
- [ ] 実践検証済み「003_画面作成作業標準書v2.0.md」
- [ ] フォーム実装テンプレート集
- [ ] コンポーネント配置標準ガイド
- [ ] 状態管理パターン集
- [ ] UI/UXチェックリスト（詳細版）

**実践テスト**:
- [ ] 標準書に従って社員情報登録フォームを作成
- [ ] 標準書に従って社員情報一覧画面を作成
- [ ] 標準書に従って会社付与情報管理画面を作成
- [ ] Next.js開発サーバー起動がエラーなく完了
- [ ] 全画面の表示確認がエラーなく完了
- [ ] フォーム送信・データ表示のE2Eテストがパス
- [ ] レスポンシブデザインチェックがパス

**検証完了基準**:
- 標準書通りの手順でUI実装が100%完了
- コンポーネント構造の統一性が確立
- デザインシステム準拠度が100%達成
- 他の開発者が標準書のみで同じUI実装が可能
- **実践テスト項目が全てエラーなく完了**

## Phase 4: 統合作業標準書体系の確立（Week 4）

### 4.1 実践結果の分析
**分析項目**:
- 標準書通りに進められた部分
- 追加が必要だった手順・説明
- 改善が必要な部分
- 新たに発見されたベストプラクティス

### 4.2 標準書統合・最終化
**更新内容**:
- 不足していた手順の追加
- より具体的な実装例の追加
- トラブルシューティング情報
- パフォーマンス考慮事項

### Phase 4 KPI: 統合作業標準書体系の確立
**目標**: 実践検証済み完全版作業標準書体系の完成

**成果物**:
- [ ] 001_MVP開発作業標準書v2.0.md（統合版）
- [ ] 002_データベース開発作業標準書v2.0.md（実践版）
- [ ] 003_画面作成作業標準書v2.0.md（実践版）
- [ ] 004_tRPC実装標準書v1.0.md（新規）
- [ ] 005_DAL層設計標準書v1.0.md（新規）
- [ ] 統合実装チェックリスト（全工程対応版）
- [ ] 継続的改善プロセス定義書

**統合実践テスト**:
- [ ] 全標準書を使用してPLMアプリケーション機能の完全実装
- [ ] データベース→API→UI の全工程がエラーなく連携
- [ ] npm run dev でアプリケーション全体が正常起動
- [ ] 社員データのCRUD操作が画面から正常実行
- [ ] npm run build でプロダクションビルドが正常完了
- [ ] TypeScript型チェック・ESLint・Prettierが全てパス

**検証完了基準**:
- 全標準書が実践検証済みで即座に使用可能
- 新規開発者が標準書のみで品質の高い実装が可能
- 継続的改善の仕組みが確立・文書化済み
- プロジェクト横断での標準書活用体制が整備完了
- **統合実践テスト項目が全てエラーなく完了**

## 並行実行タスク

### 継続的ドキュメント更新
**実行方針**:
- 各フェーズ完了時に標準書を即座に更新
- 実装中に発見された課題をリアルタイムで記録
- 週次で標準書の改善点をレビュー

### 品質検証
**検証方法**:
- 各段階でのコードレビュー実施
- 標準書準拠度のチェック
- パフォーマンステストの実行

## 成功指標

### 定量的指標
- [ ] 標準書に従った作業完了率: 90%以上
- [ ] 新規追加されたドキュメント項目: 20項目以上
- [ ] 実装中のエラー・やり直し回数: 3回以下
- [ ] 最終的なコード品質スコア: 95点以上

### 定性的指標
- [ ] 標準書が実際の開発作業で有効に機能する
- [ ] 複数の開発者が同じ品質で実装できる
- [ ] ドキュメントが具体的で実践的である
- [ ] 継続的改善の仕組みが確立される

## リスク管理

### 高リスク項目
1. **データ破損リスク**: 既存データの不整合・消失
   - 対策: 段階的バックアップ、ステージング環境での事前検証

2. **標準書不備リスク**: 実践時に手順が不明確
   - 対策: 小さなステップでの実装、即座のドキュメント更新

3. **パフォーマンス劣化リスク**: 新機能追加による既存機能の性能低下
   - 対策: 各段階でのパフォーマンステスト実行

### 緊急時対応
- ロールバック手順の事前準備
- 標準書外の対応が必要な場合の判断基準
- エスカレーション手順の明確化

## 次フェーズへの引き継ぎ

### 完成予定成果物
1. **実践検証済み標準書セット** (v2.0)
2. **PLMデータベース完全版**
3. **実装ベストプラクティス集**
4. **継続的改善プロセス定義書**

このプロジェクトにより、理論的な標準書から実践的で使える標準書への進化を実現し、今後の開発プロジェクトの基盤を確立します。