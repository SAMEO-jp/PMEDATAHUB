---
description: 
globs: 
alwaysApply: false
---
# 実績管理システム フォルダ体系

## 1. 基本構造
```
src/app/zisseki/[year]/[week]/
├── components/     # UIコンポーネント
├── constants/      # 定数定義
├── hooks/         # カスタムフック
├── lib/           # 外部ライブラリ連携
├── store/         # 状態管理
├── types/         # 型定義
├── utils/         # ユーティリティ関数
├── imports.ts     # インポート集約
└── page.tsx       # メインページ
```

## 2. 各ディレクトリの役割

### 2.1 components/
- UIコンポーネントを格納
- 機能ごとにサブディレクトリで分類
  - `sidebar/`: サイドバー関連コンポーネント
  - `EventHandlers/`: イベント処理関連コンポーネント
  - `TimeGrid/`: 時間グリッド関連コンポーネント

### 2.2 constants/
- アプリケーション全体で使用する定数
- カテゴリー定義
- 色定義
- その他の設定値

### 2.3 hooks/
- カスタムReactフック
- 状態管理ロジック
- イベントハンドリング
- データ取得ロジック

### 2.4 lib/
- 外部ライブラリとの連携
- APIクライアント
- データベース操作
- ユーティリティ関数

### 2.5 store/
- 状態管理関連
- グローバルステート
- アクション
- リデューサー

### 2.6 types/
- TypeScript型定義
- インターフェース
- 型エイリアス
- 共通型定義

### 2.7 utils/
- ユーティリティ関数
- 日付操作
- 文字列操作
- データ変換

## 3. 主要ファイル

### 3.1 page.tsx
- メインページコンポーネント
- ルーティング
- レイアウト管理
- 状態管理の初期化

### 3.2 imports.ts
- インポート文の集約
- 依存関係の管理
- バンドルサイズの最適化

## 4. 命名規則

### 4.1 ファイル名
- コンポーネント: PascalCase（例：`WeekSidebar.tsx`）
- ユーティリティ: camelCase（例：`dateUtils.ts`）
- 型定義: camelCase（例：`event.ts`）

### 4.2 ディレクトリ名
- 小文字のケバブケース（例：`event-handlers`）
- 機能を表す明確な名前

## 5. モジュール分割の原則

### 5.1 コンポーネント分割
- 単一責任の原則に基づく分割
- 再利用可能な単位での分割
- 関心の分離

### 5.2 ロジック分割
- ビジネスロジックとUIの分離
- カスタムフックによるロジックの抽出
- ユーティリティ関数の集約

## 6. 依存関係の管理

### 6.1 インポート規則
- 相対パスでのインポート
- 絶対パスでのインポート
- 循環参照の防止

### 6.2 モジュール間の関係
- 親子関係の明確化
- コンポーネントの階層構造
- データフローの方向性

## 7. 拡張性への配慮

### 7.1 新機能追加
- 既存構造を維持した拡張
- 適切なディレクトリへの配置
- 命名規則の遵守

### 7.2 リファクタリング
- コードの整理
- パフォーマンスの最適化
- 保守性の向上